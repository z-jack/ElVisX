///////////////////////////////////////////////////////////////////////////////
//
// The MIT License
//
// Copyright (c) 2006 Scientific Computing and Imaging Institute,
// University of Utah (USA)
//
// License for the specific language governing rights and limitations under
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////


// Do not modify this file, it has been autogenerated.


#include <ElVis/Core/Float.cu>
#include <ElVis/Core/FieldEvaluator.cu>
#include <ElVis/Core/TransferFunction.h>


namespace ElVis {
enum GaussKronrodType
{
    G7K15
};

template<GaussKronrodType T>
struct SingleThreadGaussKronrod;


__device__ void PrintResultType(ElVisFloat f)
{
    ELVIS_PRINTF("%2.15f\n", f);
}

__device__ void PrintResultType(ElVisFloat3 f)
{
    ELVIS_PRINTF("(%2.15f, %2.15f, %2.15f)", f.x, f.y, f.z);
}

template<>
struct SingleThreadGaussKronrod<G7K15>
{
    template<typename ResultType, typename IntegrandType>
    ELVIS_DEVICE static ResultType Integrate(const IntegrandType& integrand, const ElVisFloat& a, const ElVisFloat& b, const FieldEvaluator& f, ResultType& errorEstimate, bool traceEnabled=false)
    {
//        if( traceEnabled )
//        {
//            ELVIS_PRINTF("Starting GK Quadrature on interval [%f, %f] \n", a, b);
//        }
        ResultType gresult = DefaultFloat<ResultType>::GetValue();
        ResultType kresult = DefaultFloat<ResultType>::GetValue();
        ElVisFloat nodes[15] = {
            -0.99145537112081261188,
            -0.94910791234275848627,
            -0.86486442335976909668,
            -0.74153118559939446008,
            -0.58608723546769114776,
            -0.40584515137739718416,
            -0.20778495500789848083,
            0.00000000000000000000,
            0.20778495500789848083,
            0.40584515137739718416,
            0.58608723546769114776,
            0.74153118559939446008,
            0.86486442335976909668,
            0.94910791234275848627,
            0.99145537112081261188
        };
        ElVisFloat gweights[15] = {
            0.00000000000000000000,
            0.12948496616886970290,
            0.00000000000000000000,
            0.27970539148927664463,
            0.00000000000000000000,
            0.38183005050511892309,
            0.00000000000000000000,
            0.41795918367346940325,
            0.00000000000000000000,
            0.38183005050511892309,
            0.00000000000000000000,
            0.27970539148927664463,
            0.00000000000000000000,
            0.12948496616886970290,
            0.00000000000000000000
        };
        ElVisFloat kweights[15] = {
            0.02293532201052922437,
            0.06309209262997855783,
            0.10479001032225018775,
            0.14065325971552591899,
            0.16900472663926791039,
            0.19035057806478541953,
            0.20443294007529888567,
            0.20948214108472781869,
            0.20443294007529888567,
            0.19035057806478541953,
            0.16900472663926791039,
            0.14065325971552591899,
            0.10479001032225018775,
            0.06309209262997855783,
            0.02293532201052922437
        };

        for(int i = 0; i < 15; ++i)
        {
            ElVisFloat t = (b-a)*MAKE_FLOAT(.5)*nodes[i] + (b+a)*MAKE_FLOAT(0.5);
            ElVisFloat s = f(t);
            ResultType transferSample = integrand(t, s, traceEnabled);
//            if( traceEnabled )
//            {
//                ELVIS_PRINTF("GK sample at t = %2.15f, s = %2.15f, transferSample = ", t, s);
//                PrintResultType(transferSample);
//                ELVIS_PRINTF("\n");
//            }
            kresult += kweights[i] * transferSample;
            gresult += gweights[i] * transferSample;
//            if( traceEnabled )
//            {
//                ELVIS_PRINTF("KResult = ");
//                PrintResultType(kresult);
//                ELVIS_PRINTF("\n");
//            }
        }
        gresult *= (b-a)*MAKE_FLOAT(.5);
        kresult *= (b-a)*MAKE_FLOAT(.5);
        errorEstimate = Fabsf(gresult-kresult);

//        if( traceEnabled )
//        {
//            ELVIS_PRINTF("Final KResult = ");
//            PrintResultType(kresult);
//            ELVIS_PRINTF("\n");
//        }
        return kresult;
    }
};
}
