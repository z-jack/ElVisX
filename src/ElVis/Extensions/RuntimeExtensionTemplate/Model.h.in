////////////////////////////////////////////////////////////////////////////////
//
//  The MIT License
//
//  Copyright (c) 2006 Division of Applied Mathematics, Brown University (USA),
//  Department of Aeronautics, Imperial College London (UK), and Scientific
//  Computing and Imaging Institute, University of Utah (USA).
//
//  License for the specific language governing rights and limitations under
//  Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included
//  in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//
//  Description:
//
////////////////////////////////////////////////////////////////////////////////

#ifndef ELVIS_EXTENSIONS_@RUNTIME_EXTENSION_NAME@_MODEL_H
#define ELVIS_EXTENSIONS_@RUNTIME_EXTENSION_NAME@_MODEL_H

#include <ElVis/Core/Model.h>

namespace ElVis
{
    namespace @RUNTIME_EXTENSION_NAME@
    {
        class @RUNTIME_EXTENSION_NAME@Model : public Model
        {
            public:
                @RUNTIME_EXTENSION_NAME@Model();
                explicit @RUNTIME_EXTENSION_NAME@Model(const std::string& path);
                virtual ~@RUNTIME_EXTENSION_NAME@Model();

            protected:
		/// \brief Returns the number of scalar fields supported by the model.
		///
		/// Simulations often generate multiple fields (e.g., pressure, temperature) in a
		/// single simulations.  This method returns how many fields the model has that
		/// can be visualized.
                virtual int DoGetNumFields() const;

		/// \brief Returns information about the requested field.
		/// \param index A value in the range [0, DoGetNumFields()).
		/// \return Information about the given field.
		///
		/// This method returns additional information about the requested field.
		/// The values of the FieldInfo struct are populated as follows:
		///
		/// FieldInfo::Name - A user-readable name that is used in the gui to identify
		/// the field.
		///
		/// FieldInfo::Id - An unique identifier for the field.  This can be different
		/// than the index parameter.  This id can be used to uniquely identify the field
		/// in the extension.
		/// 
		/// FieldInfo::Shortcut - A shortcut for use in the Qt GUI to select the field.
		/// The format is that described in the documentation for QKeySequence.  
		/// The shortcut is not currently used.
                virtual FieldInfo DoGetFieldInfo(unsigned int index) const;
                virtual int DoGetNumberOfBoundarySurfaces() const;
                virtual void DoGetBoundarySurface(int surfaceIndex, std::string& name, std::vector<int>& faceIds);
                virtual void DoMapInteropBufferForCuda();
                virtual void DoUnMapInteropBufferForCuda();
                virtual void DoCalculateExtents(WorldPoint& min, WorldPoint& max);
                virtual unsigned int DoGetNumberOfElements() const;
                virtual const std::string& DoGetPTXPrefix() const;

                virtual std::vector<optixu::GeometryGroup> DoGetCellGeometry(Scene* scene, optixu::Context context, CUmodule module);
                virtual void DoGetFaceGeometry(Scene* scene, optixu::Context context, CUmodule module, optixu::Geometry& faces);

                virtual void DoSetupCudaContext(CUmodule module) const;

            private:
                // Copying and assignment of models is disabled in ElVis.
                @RUNTIME_EXTENSION_NAME@Model(const @RUNTIME_EXTENSION_NAME@Model& rhs);
                @RUNTIME_EXTENSION_NAME@Model& operator=(const @RUNTIME_EXTENSION_NAME@Model& rhs);
        };
    }
}

#endif //ELVIS_EXTENSIONS_@RUNTIME_EXTENSION_NAME@_MODEL_H
