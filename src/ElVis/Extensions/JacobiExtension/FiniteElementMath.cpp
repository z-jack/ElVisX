////////////////////////////////////////////////////////////////////////////////
//
//  File: hoFiniteElementMath.cpp
//
//
//  The MIT License
//
//  Copyright (c) 2006 Division of Applied Mathematics, Brown University (USA),
//  Department of Aeronautics, Imperial College London (UK), and Scientific
//  Computing and Imaging Institute, University of Utah (USA).
//
//  License for the specific language governing rights and limitations under
//  Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included
//  in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//
//  Description:
//
//  This file contains many of the linear algebra and assorted other
//  math routines necessary for ray tracing finite element volumes.
//
////////////////////////////////////////////////////////////////////////////////

#include <ElVis/Extensions/JacobiExtension/Isosurface.h>
#ifdef _MSCVER
#pragma warning( disable : 4786 )
#endif

#include <ElVis/Extensions/JacobiExtension/FiniteElementMath.h>
#include <ElVis/Extensions/JacobiExtension/PointTransformations.hpp>
#include <ElVis/Extensions/JacobiExtension/Polylib.h>

#include <algorithm>

namespace ElVis
{
    namespace JacobiExtension
    {
        // Notes for linking scsl (where lapack lives)
        // -lscs for single threaded
        // -lscs-mp for multi threaded.
        // -lscs-i8 for 64 bit
        // -lscs-i8-mp for 64 bit

        // Alternative, -lcomplib.sgimath

        extern "C" void shseqr_(char* job, char* compz, int* n, int* ilo,
            int* ihi, float* h, int* ldh, float* wr, float* wi, float* z,
            int* ldz, float* work, int* lwork, int* info);

        extern "C" void dhseqr_(char* job, char* compz, int* n, int* ilo,
            int* ihi, double* h, int* ldh, double* wr, double* wi, double* z,
            int* ldz, double* work, int* lwork, int* info);

        extern "C" int dgebal_(char *job, int *n, double *a,
            int *lda, int *ilo, int *ihi,
            double *scale, int *info);


        // For root finding, we'll use the shseqr method from LAPACK.
        // This method requires an upper Hessenberg matrix, with the
        // coefficients of the polynomial in the rightmost column.
        //
        // The root finding matrix has the following form.
        //
        // [ 0 0 0 0 -a0 ]
        // [ 1 0 0 0 -a1 ]
        // [ 0 1 0 0 -a2 ]
        // [ 0 0 1 0 -a3 ]
        // [ 0 0 0 1 -a4 ]
        //
        // This will find the roots for the 5th order polynomial (assuming a5=1)
        // with these coefficients.
        //
        // Note that shseqr is a FORTRAN method.  We pass the array to FORTRAN in column
        // order.
        //

        // For the numerical recipes code.  I was having
        // compilation problems when including the numerical recipes
        // header file and these are the only things I need from it.
        //static int imaxarg1,imaxarg2;
#define SIGN(a,b) ((b) >= 0.0 ? fabs(a) : -fabs(a))

#include <math.h>
#include <iostream>
        using std::cout;
        using std::cerr;
        using std::endl;

        bool getChebyshevPoints(double a, double b, int n, double* result)
        {
            if( b < a || n <= 0 )
                return false;

            for(int j = n; j >= 0; j--)
            {
                result[n-j] = 1.0/2.0*(cos((2.0*j+1.0)*M_PI/(2.0*n+2.0))+1.0)*(b-a)+a;
                //result[j] = 1.0/2.0*(cos((2.0*j+1.0)*M_PI/(2.0*n+2.0))+1.0)*(b-a)+a;
            }

            return true;
        }

        bool getChebyshevPoints(double a, double b, int n, std::set<double>& result)
        {
            if( b < a || n <= 0 )
                return false;

            for(int j = n; j >= 0; j--)
            {
                result.insert(cos( (2.0*j+1.0)*M_PI/(2.0*n+2.0) ) * (b-a)/2.0 + (a+b)/2.0);
            }

            return true;
        }

        bool enumerateCombinations(int n, int k, int* j)
        {
            int i;
            if(j[0] < 0){
                for(i = 0; i < k; ++i){
                    j[i] = i;
                }
                return true;
            } else {
                for(i = k - 1; i >= 0 && j[i] >= n - k + i; --i){}
                if(i >= 0){
                    j[i]++;
                    int m;
                    for(m = i + 1; m < k; ++m){
                        j[m] = j[m-1] + 1;
                    }
                    return true;
                } else {
                    return false;
                }
            }
        }

        void generate30OrderCoefficientsForChebyshevPoints(const double* f, double* c)
        {
            //  double s2 = 0.6727957194481775E-7*f[30]+0.3435035850670702E-6*f[28]-0.4913587789725272E-6*f[27]-0.6728858445949194E-7*f[0]-0.6508342487330033E-6*f
            //[4]+0.4913989280899075E-6*f[3]-0.3435367852724953E-6*f[2];
            //      double s1 = s2+0.2032609847776547E-6*f[1]+0.1261228969364688E-5*f[7]+
            //0.8270100165581201E-6*f[5]-0.1027030178767896E-5*f[6]-0.2390446100229852E-5*f
            //[10]+0.190627748625879E-5*f[9]-0.1545549079121673E-5*f[8]-0.4228814218355747E-5
            //*f[12];
            //      s2 = s1+0.3091816226382567E-5*f[11]-0.1304731131853895E-4*f[14]+
            //0.6456251880859248E-5*f[13]-0.6456269795529344E-5*f[17]+0.1304758597713544E-4*f
            //[16]+0.9999999997521845*f[15]-0.1906223481747673E-5*f[21];
            //      double s3 = s2+0.2390394748555071E-5*f[20]-0.3091771388030976E-5*f[19]+
            //0.4228785145016598E-5*f[18]-0.8269607696699209E-6*f[25];
            //      c[0] = s3+0.1026978121112122E-5*f[24]-0.1261175104223743E-5*f[23]+
            //0.1545494472824993E-5*f[22]+0.6507888965360019E-6*f[26]-0.2032373633382108E-6*f
            //[29];
            //      s2 = -0.5070841127108054E-1*f[30]-0.2588976310871918*f[28]+
            //0.3703356676850646*f[27]+0.5071506922618892E-1*f[0]+0.4905304416155544*f[4]
            //-0.37036487992059*f[3]+0.2589219442529335*f[2];
            //      s1 = s2-0.1531967844888271*f[1]-0.9505814825828598*f[7]
            //-0.6233131626122741*f[5]+0.7740672334888552*f[6]+0.1801664725790423E1*f[10]
            //-0.1436750369406308E1*f[9]+0.1164871777907652E1*f[8]+0.3187226213037744E1*f[12]
            //;
            //      s2 = s1-0.2330281666257011E1*f[11]+0.983357731857846E1*f[14]
            //-0.4866019111025263E1*f[13]+0.4866096759426973E1*f[17]-0.9834042263336073E1*f
            //[16]+0.3990650686089584E-3*f[15]+0.1436716340177009E1*f[21];
            //      s3 = s2-0.1801635873516791E1*f[20]+0.2330263552006172E1*f[19]
            //-0.3187232552576254E1*f[18]+0.6232779943874753*f[25];
            //      c[1] = s3-0.7740305953036919*f[24]+0.9505443648168402*f[23]
            //-0.116483536679545E1*f[22]-0.4904977096315341*f[26]+0.1531793923452446*f[29];
            //      s2 = 0.5074258484058879E-1*f[30]+0.2672768157952414*f[28]
            //-0.3946924413869082*f[27]+0.5081125002699206E-1*f[0]+0.5466664153034625*f[4]
            //-0.3951760338046626*f[3]+0.2676183172951571*f[2];
            //      s1 = s2-0.1550776641532232*f[1]-0.1312102060638166E1*f[7]
            //-0.7348619431226997*f[5]+0.9793435506341699*f[6]+0.3713556684167175E1*f[10]
            //-0.251589434476726E1*f[9]+0.1789044971482847E1*f[8]+0.1064860170238917E2*f[12];
            //      s2 = s1-0.5910494547463756E1*f[11]+0.972049878009986E2*f[14]
            //-0.2417598790099966E2*f[13]-0.2417073602383584E2*f[17]+0.9720009619968078E2*f
            //[16]-0.1600002574281264E3*f[15]-0.2514087663984008E1*f[21];
            //      s3 = s2+0.3711312093363996E1*f[20]-0.5907635916552066E1*f[19]+
            //0.1064481588296391E2*f[18]-0.7340596106805002*f[25];
            //      c[2] = s3+0.9783527956168836*f[24]-0.1310891898988339E1*f[23]+
            //0.178757032764993E1*f[22]+0.5460309145304136*f[26]-0.1548728282358439*f[29];
            //      s2 = 0.8062540279396369E1*f[30]+0.4114754027630105E2*f[28]
            //-0.5883282591365562E2*f[27]-0.8063558365946398E1*f[0]-0.7787622061337836E2*f[4]
            //+0.5883715227856437E2*f[3]-0.4115119136765128E2*f[2];
            //      s1 = s2+0.2435467103907701E2*f[1]+0.1502832481639201E3*f[7]+
            //0.9886449809445997E2*f[5]-0.1226127057382639E3*f[6]-0.2806155668508139E3*f[10]+
            //0.225476917143276E3*f[9]-0.1836335889454394E3*f[8]-0.4743885430734707E3*f[12];
            //      s2 = s1+0.3578592369588751E3*f[11]-0.6125829091182299E3*f[14]+
            //0.6584699407466166E3*f[13]-0.6584966404903314E3*f[17]+0.6126393097756434E3*f
            //[16]-0.3655884100871548E-1*f[15]-0.2254735504520778E3*f[21];
            //      s3 = s2+0.2806139628464514E3*f[20]-0.3578609860437967E3*f[19]+
            //0.4743973825386272E3*f[18]-0.988595033332376E2*f[25];
            //      c[3] = s3+0.1226076783728953E3*f[24]-0.1502784175854022E3*f[23]+
            //0.1836292593050901E3*f[22]+0.7787145856839274E2*f[26]-0.243520296548829E2*f[29]
            //;
            //      s2 = -0.8070536618764414E1*f[30]-0.4249234902256747E2*f[28]+
            //0.627209149250556E2*f[27]-0.8076287726441515E1*f[0]-0.8676360302201407E2*f[4]+
            //0.6276003067453325E2*f[3]-0.4252025470651259E2*f[2];
            //      s1 = s2+0.2464594592292387E2*f[1]+0.2073907319338553E3*f[7]+
            //0.1165260378783835E3*f[5]-0.1550897565024584E3*f[6]-0.5783119268725396E3*f[10]+
            //0.394761948991566E3*f[9]-0.2819720591295513E3*f[8]-0.1584802578205564E4*f[12];
            //      s2 = s1+0.9075592353686495E3*f[11]-0.605547115995804E4*f[14]+
            //0.3271320356745306E4*f[13]+0.3271041096677453E4*f[17]-0.605526890322965E4*f[16]
            //+0.7616023777129964E4*f[15]+0.3946234736872247E3*f[21];
            //      s3 = s2-0.5781432426346626E3*f[20]+0.9073518035291436E3*f[19]
            //-0.1584548052261177E4*f[18]+0.1164621743703938E3*f[25];
            //      c[4] = s3-0.1550114774286156E3*f[24]+0.2072958765193669E3*f[23]
            //-0.2818575707377705E3*f[22]-0.8671263337734366E2*f[26]+0.2462898707985263E2*f
            //[29];
            //      s2 = -0.3781150436238107E3*f[30]-0.1927874227350851E4*f[28]+
            //0.2753596881980169E4*f[27]+0.378161019548566E3*f[0]+0.3639257301733866E4*f[4]
            //-0.275378569809316E4*f[3]+0.1928036006331771E4*f[2];
            //      s1 = s2-0.1141818449885329E4*f[1]-0.6953526641750543E4*f[7]
            //-0.4609866869816431E4*f[5]+0.569920086977109E4*f[6]+0.1252990704355462E5*f[10]
            //-0.1025132387356626E5*f[9]+0.8438820483407803E4*f[8]+0.1898020243886538E5*f[12]
            //;
            //      s2 = s1-0.1544617430703536E5*f[11]+0.1503906377003939E5*f[14]
            //-0.2080896297083914E5*f[13]+0.2081024326450212E5*f[17]-0.1504107767174556E5*f
            //[16]+0.1178406763861303E1*f[15]+0.1025125364456293E5*f[21];
            //      s3 = s2-0.1252995416649659E5*f[20]+0.1544642870037143E5*f[19]
            //-0.1898084100822861E5*f[18]+0.4609659211034527E4*f[25];
            //      c[5] = s3-0.5699000637701177E4*f[24]+0.69533475978129E4*f[23]
            //-0.8438681461328742E4*f[22]-0.3639053618265139E4*f[26]+0.1141700005446273E4*f
            //[29];
            //      s2 = 0.3785298510556461E3*f[30]+0.199108482084161E4*f[28]
            //-0.2935863051371277E4*f[27]+0.3787181933179477E3*f[0]+0.4054195096553996E4*f[4]
            //-0.2937101164015514E4*f[3]+0.199197737891999E4*f[2];
            //      s1 = s2-0.1155354144686645E4*f[1]-0.9595141630446702E4*f[7]
            //-0.5432910129837408E4*f[5]+0.7208184715693404E4*f[6]+0.2582127204491494E5*f[10]
            //-0.1794684819212694E5*f[9]+0.1295706920667964E5*f[8]+0.6340619632071208E5*f[12]
            //;
            //      s2 = s1-0.3917129296648879E5*f[11]+0.1486658699274627E6*f[14]
            //-0.1033798997542931E6*f[13]-0.1033739347736167E6*f[17]+0.148662050250361E6*f
            //[16]-0.1697287721905317E6*f[15]-0.1794276046800166E5*f[21];
            //      s3 = s2+0.2581643498145364E5*f[20]-0.3916563870416603E5*f[19]+
            //0.6339991845042422E5*f[18]-0.5430924701470599E4*f[25];
            //      c[6] = s3+0.7205773395987934E4*f[24]-0.9592250377835098E4*f[23]+
            //0.1295362584121403E5*f[22]+0.405259653105965E4*f[26]-0.1154804757764261E4*f[29]
            //;
            //      s2 = 0.8227648590249741E4*f[30]+0.4188557360120527E5*f[28]
            //-0.5972578128159553E5*f[27]-0.8228612972937383E4*f[0]-0.7874157675981961E5*f[4]
            //+0.5972960009169869E5*f[3]-0.4188890012331726E5*f[2];
            //      s1 = s2+0.2483310433101798E5*f[1]+0.1481028696295636E6*f[7]+
            //0.9939247522489636E5*f[5]-0.1222663718890913E6*f[6]-0.2525886546152037E6*f[10]+
            //0.2124426790214827E6*f[9]-0.1778207257961538E6*f[8]-0.3291634814503658E6*f[12];
            //      s2 = s1+0.2961875928294205E6*f[11]-0.199590509744464E6*f[14]+
            //0.3123466556218915E6*f[13]-0.3123719486336808E6*f[17]+0.1996250550934216E6*f
            //[16]-0.1922490682022357E2*f[15]-0.212442806324698E6*f[21];
            //      s3 = s2+0.2525917982881584E6*f[20]-0.2961955807418805E6*f[19]+
            //0.3291789417810803E6*f[18]-0.9938850431520106E5*f[25];
            //      c[7] = s3+0.1222627430618512E6*f[24]-0.1480999346801696E6*f[23]+
            //0.1778189651936282E6*f[22]+0.7873754978153745E5*f[26]-0.2483063790570484E5*f
            //[29];
            //      s2 = -0.8237103872700451E4*f[30]-0.4326108522940896E5*f[28]+
            //0.6368225058007059E5*f[27]-0.8240307551204729E4*f[0]-0.8771540053001614E5*f[4]+
            //0.637026130183883E5*f[3]-0.4327592381980309E5*f[2];
            //      s1 = s2+0.2512619415085453E5*f[1]+0.2043590839235598E6*f[7]+
            //0.1171328545470521E6*f[5]-0.1546327579472015E6*f[6]-0.5205162322472912E6*f[10]+
            //0.3719103315969217E6*f[9]-0.2730194034771948E6*f[8]-0.1099612472622577E7*f[12];
            //      s2 = s1+0.7511165305837715E6*f[11]-0.1973048812257182E7*f[14]+
            //0.1551757680804833E7*f[13]+0.155168850718677E7*f[17]-0.1973007553017318E7*f[16]
            //+0.2149900685732326E7*f[15]+0.3718485336100335E6*f[21];
            //      s3 = s2-0.5204456469130464E6*f[20]+0.7510385379119906E6*f[19]
            //-0.1099532685118168E7*f[18]+0.1171008476622226E6*f[25];
            //      c[8] = s3-0.1545943086295278E6*f[24]+0.2043135780957778E6*f[23]
            //-0.2729661105623967E6*f[22]-0.8768937078863296E5*f[26]+0.2511694517909856E5*f
            //[29];
            //      s2 = -0.1007702125906379E6*f[30]-0.51191576033581E6*f[28]+
            //0.728274250419901E6*f[27]+0.1007816095271731E6*f[0]+0.9568934251699602E6*f[4]
            //-0.7283176595553793E6*f[3]+0.5119542598067257E6*f[2];
            //      s1 = s2-0.3039389933092131E6*f[1]-0.1761704511431627E7*f[7]
            //-0.1202040027646829E7*f[5]+0.1468624900496176E7*f[6]+0.2800850993920407E7*f[10]
            //-0.2437852767647256E7*f[9]+0.2085219269975964E7*f[8]+0.3179089948410736E7*f[12]
            //;
            //      s2 = s1-0.310522851439205E7*f[11]+0.1639095380768762E7*f[14]
            //-0.2752831487325652E7*f[13]+0.2753104615853045E7*f[17]-0.163943934332111E7*f
            //[16]+0.1860108651811511E3*f[15]+0.2437870955343585E7*f[21];
            //      s3 = s2-0.2800908104036302E7*f[20]+0.3105341854981259E7*f[19]
            //-0.3179278298015833E7*f[18]+0.1201997716465665E7*f[25];
            //      c[9] = s3-0.146858876845156E7*f[24]+0.1761679303401678E7*f[23]
            //-0.2085211308408985E7*f[22]-0.9568488032814177E6*f[26]+0.303910064343444E6*f
            //[29];
            //      s2 = 0.1008891405537096E6*f[30]+0.5287427354143423E6*f[28]
            //-0.7765403427175844E6*f[27]+0.1009217188957115E6*f[0]+0.1065917102737008E7*f[4]
            //-0.7767405511163757E6*f[3]+0.5288902777377388E6*f[2];
            //      s1 = s2-0.3075167945820185E6*f[1]-0.243082898545892E7*f[7]
            //-0.1416553673559712E7*f[5]+0.1857356046358091E7*f[6]+0.5771724135987199E7*f[10]
            //-0.4267734940095427E7*f[9]+0.3201510674481154E7*f[8]+0.1062014028096438E8*f[12]
            //;
            //      s2 = s1-0.7874647374392773E7*f[11]+0.1620352200952586E8*f[14]
            //-0.1367630801367883E8*f[13]-0.1367580907587503E8*f[17]+0.1620323753866485E8*f
            //[16]-0.1719922753873056E8*f[15]-0.4267182979196474E7*f[21];
            //      s3 = s2+0.5771116928134378E7*f[20]-0.7874010208240677E7*f[19]+
            //0.1061952808481741E8*f[18]-0.1416245832353903E7*f[25];
            //      c[10] = s3+0.1856990878758237E7*f[24]-0.2430403323389622E7*f[23]+
            //0.3201021832638031E7*f[22]+0.1065663920076301E7*f[26]-0.3074236723564911E6*f
            //[29];
            //      s2 = 0.7711255347029679E6*f[30]+0.390665450051637E7*f[28]
            //-0.5541390692288343E7*f[27]-0.7712097572160117E6*f[0]-0.724950886720975E7*f[4]+
            //0.5541698460500393E7*f[3]-0.390693284206649E7*f[2];
            //      s1 = s2+0.2323765550236907E7*f[1]+0.1299547307416088E8*f[7]+
            //0.9051326082978372E7*f[5]-0.1096460460571815E8*f[6]-0.1909428808428898E8*f[10]+
            //0.1724043007663307E8*f[9]-0.1511991684233674E8*f[8]-0.1934241286522944E8*f[12];
            //      s2 = s1+0.2011084578134623E8*f[11]-0.8970117921867209E7*f[14]+
            //0.1575227362149227E8*f[13]-0.1575410718023115E8*f[17]+0.8972310747405345E7*f
            //[16]-0.1164631497876444E4*f[15]-0.1724066774005905E8*f[21];
            //      s3 = s2+0.190948167539507E8*f[20]-0.2011175678566595E8*f[19]+
            //0.1934378095282118E8*f[18]-0.905104768045601E7*f[25];
            //      c[11] = s3+0.109643867432016E8*f[24]-0.129953536502149E8*f[23]+
            //0.1511994427025874E8*f[22]+0.7249201424095652E7*f[26]-0.2323553427954636E7*f
            //[29];
            //      s2 = -0.772051355594553E6*f[30]-0.4035147821109395E7*f[28]+
            //0.5908755847592118E7*f[27]-0.7722661659523796E6*f[0]-0.8075337334259823E7*f[4]+
            //0.591003189557663E7*f[3]-0.4036099265189678E7*f[2];
            //      s1 = s2+0.2351072275265449E7*f[1]+0.1793112795030091E8*f[7]+
            //0.1066642989971512E8*f[5]-0.1386662169000679E8*f[6]-0.3934742567758771E8*f[10]+
            //0.3018103620708276E8*f[9]-0.2321387738492492E8*f[8]-0.6461575886488687E8*f[12];
            //      s2 = s1+0.5099957959419082E8*f[11]-0.8867686198682298E8*f[14]+
            //0.7825912574041145E8*f[13]+0.7825671473587201E8*f[17]-0.8867552881031326E8*f
            //[16]+0.9261133818489012E8*f[15]+0.3017786768425921E8*f[21];
            //      s3 = s2-0.3934406386968503E8*f[20]+0.5099620456582768E8*f[19]
            //-0.6461266817908765E8*f[18]+0.1066451448881257E8*f[25];
            //      c[12] = s3-0.1386438147730457E8*f[24]+0.1792856069290763E8*f[23]
            //-0.232109917280067E8*f[22]-0.8073742324181747E7*f[26]+0.2350464172209572E7*f
            //[29];
            //      s2 = -0.3923123935694539E7*f[30]-0.1980861152696918E8*f[28]+
            //0.2799624945372742E8*f[27]+0.3923538033996759E7*f[0]+0.3643421116646178E8*f[4]
            //-0.2799769733479856E8*f[3]+0.1980994897310114E8*f[2];
            //      s1 = s2-0.1180927794769534E8*f[1]-0.632951383341152E8*f[7]
            //-0.4515717191246471E8*f[5]+0.5415206341046104E8*f[6]+0.8577693562568386E8*f[10]
            //-0.8022810603827451E8*f[9]+0.72242177595017E8*f[8]+0.7933124587491055E8*f[12];
            //      s2 = s1-0.864877723582304E8*f[11]+0.3419544625269579E8*f[14]
            //-0.618822075080061E8*f[13]+0.618904152854607E8*f[17]-0.3420492270073122E8*f[16]
            //+0.4972086964784613E4*f[15]+0.8022968154469357E8*f[21];
            //      s3 = s2-0.8577989088584396E8*f[20]+0.8649240128384881E8*f[19]
            //-0.7933771526181484E8*f[18]+0.4515597067936206E8*f[25];
            //      c[13] = s3-0.5415122666133598E8*f[24]+0.6329485816421068E8*f[23]
            //-0.7224268599924766E8*f[22]-0.3643281040846941E8*f[26]+0.1180824338309569E8*f
            //[29];
            //      s2 = 0.3927890602797883E7*f[30]+0.2046041719039215E8*f[28]
            //-0.2985265001831228E8*f[27]+0.3928855992617407E7*f[0]+0.4058410988072496E8*f[4]
            //-0.2985819075132827E8*f[3]+0.2046459929254924E8*f[2];
            //      s1 = s2-0.1194787989206158E8*f[1]-0.8733371213885945E8*f[7]
            //-0.5321432802118077E8*f[5]+0.6848385036539003E8*f[6]+0.1767591229881246E9*f[10]
            //-0.1404462413517974E9*f[9]+0.1109138665900381E9*f[8]+0.2650164816191784E9*f[12]
            //;
            //      s2 = s1-0.2193261945340821E9*f[11]+0.3380547959409827E9*f[14]
            //-0.3074398348426506E9*f[13]-0.307431679827431E9*f[17]+0.3380503841062258E9*f
            //[16]-0.3492774531689221E9*f[15]-0.1404339159476916E9*f[21];
            //      s3 = s2+0.1767464717874696E9*f[20]-0.2193139562481069E9*f[19]+
            //0.2650056850855138E9*f[18]-0.5320622470269987E8*f[25];
            //      c[14] = s3+0.6847451819047315E8*f[24]-0.8732321228477145E8*f[23]+
            //0.1109023267887539E9*f[22]+0.4057727011326613E8*f[26]-0.1194517280460227E8*f
            //[29];
            //      s2 = 0.1377834220441446E8*f[30]+0.6929185717725956E8*f[28]
            //-0.9751542300459194E8*f[27]-0.1377974863885685E8*f[0]-0.1261277597988914E9*f[4]
            //+0.9752011498103254E8*f[3]-0.6929629161086661E8*f[2];
            //      s1 = s2+0.4142098849184702E8*f[1]+0.2115226295333543E9*f[7]+
            //0.1550044870143145E9*f[5]-0.183761344629224E9*f[6]-0.2650581452464037E9*f[10]+
            //0.2559760493268084E9*f[9]-0.2365872456656051E9*f[8]-0.227966580647254E9*f[12];
            //      s2 = s1+0.2577557104872241E9*f[11]-0.9322429092043975E8*f[14]+
            //0.1723274188204262E9*f[13]-0.1723529260789067E9*f[17]+0.932530075843846E8*f[16]
            //-0.1493725120521293E5*f[15]-0.2559824709525688E9*f[21];
            //      s3 = s2+0.2650689544608421E9*f[20]-0.2577715014724322E9*f[19]+
            //0.2279875050558659E9*f[18]-0.1550009676638731E9*f[25];
            //      c[15] = s3+0.1837592639266046E9*f[24]-0.2115226323738689E9*f[23]+
            //0.2365900604456694E9*f[22]+0.1261233803723221E9*f[26]-0.4141750392738148E8*f
            //[29];
            //      s2 = -0.1379523013199218E8*f[30]-0.7157264803742768E8*f[28]+
            //0.1039825789276652E9*f[27]-0.1379827868626258E8*f[0]-0.1404925694126504E9*f[4]+
            //0.1039994729971392E9*f[3]-0.715855636469569E8*f[2];
            //      s1 = s2+0.4190669392103496E8*f[1]+0.2918539747219699E9*f[7]+
            //0.1826595830420556E9*f[5]-0.2323935444390022E9*f[6]-0.5461998783148439E9*f[10]+
            //0.4481065684762011E9*f[9]-0.3632320013182657E9*f[8]-0.7615542277361248E9*f[12];
            //      s2 = s1+0.6536482088602459E9*f[11]-0.9216250622662612E9*f[14]+
            //0.8561528891480782E9*f[13]+0.8561330830710116E9*f[17]-0.9216145198498706E9*f
            //[16]+0.9451047473392082E9*f[15]+0.4480729929287436E9*f[21];
            //      s3 = s2-0.5461664209269878E9*f[20]+0.6536168332992203E9*f[19]
            //-0.7615273548123304E9*f[18]+0.1826355542909389E9*f[25];
            //      c[16] = s3-0.232366324957627E9*f[24]+0.2918239332535379E9*f[23]
            //-0.3631997245709981E9*f[22]-0.1404719903063981E9*f[26]+0.4189822513694888E8*f
            //[29];
            //      s2 = -0.3411173579473602E8*f[30]-0.1707522024492737E9*f[28]+
            //0.2391204766531294E9*f[27]+0.3411510499101293E8*f[0]+0.3071187806446558E9*f[4]
            //-0.2391311692215998E9*f[3]+0.1707625609632903E9*f[2];
            //      s1 = s2-0.102391617511953E9*f[1]-0.4957286683429698E9*f[7]
            //-0.3738602855569954E9*f[5]+0.4376955027093443E9*f[6]+0.5772837786492012E9*f[10]
            //-0.5734770482304018E9*f[9]+0.5432875653040804E9*f[8]+0.4683700246679584E9*f[12]
            //;
            //      s2 = s1-0.5448629105376689E9*f[11]+0.1841750803886218E9*f[14]
            //-0.3458015548717852E9*f[13]+0.3458577891920697E9*f[17]-0.1842372137853054E9*f
            //[16]+0.3211349817077249E5*f[15]+0.573494362935318E9*f[21];
            //      s3 = s2-0.5773107605527751E9*f[20]+0.5449002836824416E9*f[19]
            //-0.4684175670780354E9*f[18]+0.3738531642484876E9*f[25];
            //      c[17] = s3-0.4376922385681817E9*f[24]+0.4957307317572106E9*f[23]
            //-0.5432964963657391E9*f[22]-0.307109193217895E9*f[26]+0.1023833418003224E9*f
            //[29];
            //      s2 = 0.3415382538795626E8*f[30]+0.1763740106565382E9*f[28]
            //-0.2549806807060446E9*f[27]+0.3416070128006428E8*f[0]+0.3420944504212242E9*f[4]
            //-0.2550174439567854E9*f[3]+0.1764024944274259E9*f[2];
            //      s1 = s2-0.1035914343936765E9*f[1]-0.6839916146553004E9*f[7]
            //-0.4405597080669243E9*f[5]+0.5535279588139078E9*f[6]+0.1189595594737689E10*f
            //[10]-0.1003915049402845E10*f[9]+0.8341054549572642E9*f[8]+0.1564659716623914E10
            //*f[12];
            //      s2 = s1-0.1381730305229063E10*f[11]+0.1820799520016726E10*f[14]
            //-0.1718013027648897E10*f[13]-0.1717978057908355E10*f[17]+0.1820781136901289E10*
            //f[16]-0.1857049900772546E10*f[15]-0.1003849828914302E10*f[21];
            //      s3 = s2+0.1189532287244368E10*f[20]-0.1381672469656328E10*f[19]+
            //0.1564611349322151E10*f[18]-0.4405089414021116E9*f[25];
            //      c[18] = s3+0.5534714387152566E9*f[24]-0.6839304507706307E9*f[23]+
            //0.8340411890177156E9*f[22]+0.3420502955041102E9*f[26]-0.1035725105437903E9*f
            //[29];
            //      s2 = 0.5997020264533793E8*f[30]+0.29859500475527E9*f[28]
            //-0.4158243393117771E9*f[27]-0.59975936894852E8*f[0]-0.5299064862992301E9*f[4]+
            //0.4158415977061485E9*f[3]-0.2986121755974571E9*f[2];
            //      s1 = s2+0.1796945041080058E9*f[1]+0.8215746253376393E9*f[7]+
            //0.6383920573453446E9*f[5]-0.7375032343953161E9*f[6]-0.8945461520908522E9*f[10]+
            //0.9107808941734065E9*f[9]-0.8826952168401114E9*f[8]-0.6922540641438121E9*f[12];
            //      s2 = s1+0.8237067785899074E9*f[11]-0.2641791275191546E9*f[14]+
            //0.5018948204903681E9*f[13]-0.5019834128029403E9*f[17]+0.2642756152459577E9*f
            //[16]-0.4962724135549654E5*f[15]-0.910812774979365E9*f[21];
            //      s3 = s2+0.8945930086941705E9*f[20]-0.8237690135434529E9*f[19]+
            //0.6923307349460925E9*f[18]-0.6383820912221516E9*f[25];
            //      c[19] = s3+0.7375004084164143E9*f[24]-0.821581240760853E9*f[23]+
            //0.8827134914274956E9*f[22]+0.5298916941197879E9*f[26]-0.179680544358666E9*f[29]
            //;
            //      s2 = -0.6004458583691612E8*f[30]-0.3084277762016424E9*f[28]+
            //0.4434074106682261E9*f[27]-0.6005570974228874E8*f[0]-0.5902507381900672E9*f[4]+
            //0.4434647449907793E9*f[3]-0.3084728219694124E9*f[2];
            //      s1 = s2+0.1817989957202391E9*f[1]+0.1133580183925549E10*f[7]+
            //0.7522822168606037E9*f[5]-0.9326733414457486E9*f[6]-0.1843370194244436E10*f[10]
            //+0.1594388463532031E10*f[9]-0.1355192026712632E10*f[8]-0.2312584149955128E10*f
            //[12];
            //      s2 = s1+0.2088858878775735E10*f[11]-0.2611773842072398E10*f[14]+
            //0.2493530787959369E10*f[13]+0.249348585587183E10*f[17]-0.2611750453456908E10*f
            //[16]+0.2652931137104616E10*f[15]+0.1594297632581665E10*f[21];
            //      s3 = s2-0.1843284053333239E10*f[20]+0.2088781914898818E10*f[19]
            //-0.2312521037648824E10*f[18]+0.7522054647317892E9*f[25];
            //      c[20] = s3-0.9325894064542283E9*f[24]+0.1133491131129007E10*f[23]
            //-0.1355100453824245E10*f[22]-0.5901828916549667E9*f[26]+0.1817686639928212E9*f
            //[29];
            //      s2 = -0.7440398492292959E8*f[30]-0.3682380911895618E9*f[28]+
            //0.5096324839408539E9*f[27]+0.7441087536816234E8*f[0]+0.6439076227229479E9*f[4]
            //-0.5096520867845899E9*f[3]+0.3682581628424299E9*f[2];
            //      s1 = s2-0.222501168764662E9*f[1]-0.9578269022457952E9*f[7]
            //-0.7671579589613159E9*f[5]+0.8741100013718528E9*f[6]+0.9813132792905422E9*f[10]
            //-0.1020648886311874E10*f[9]+0.1009814898426427E10*f[8]+0.7305420427151109E9*f
            //[12];
            //      s2 = s1-0.8852215370518774E9*f[11]+0.2723377314085487E9*f[14]
            //-0.5221397516776321E9*f[13]+0.5222388343902118E9*f[17]-0.2724444308969685E9*f
            //[16]+0.5467094848975564E5*f[15]+0.1020689262689205E10*f[21];
            //      s3 = s2-0.9813699419928334E9*f[20]+0.8852942930161263E9*f[19]
            //-0.7306293982442537E9*f[18]+0.7671484644393924E9*f[25];
            //      c[21] = s3-0.8741096320596716E9*f[24]+0.9578381204031745E9*f[23]
            //-0.1009839866755354E10*f[22]-0.643891654554904E9*f[26]+0.2224845484407472E9*f
            //[29];
            //      s2 = 0.7449665879563891E8*f[30]+0.3803660965492388E9*f[28]
            //-0.5434407113492607E9*f[27]+0.7450945986579801E8*f[0]+0.7172309148369666E9*f[4]
            //-0.5435042554470354E9*f[3]+0.3804167515179095E9*f[2];
            //      s1 = s2-0.2251058385189628E9*f[1]-0.1321572860249562E10*f[7]
            //-0.904016682968888E9*f[5]+0.1105427573401763E10*f[6]+0.2022169145279333E10*f
            //[10]-0.1786718581924367E10*f[9]+0.1550354515326121E10*f[8]+
            //0.2440498212838874E10*f[12];
            //      s2 = s1-0.2244858443728312E10*f[11]+0.2692467272788935E10*f[14]
            //-0.2594126923455026E10*f[13]-0.2594085370258039E10*f[17]+0.2692445815120894E10*
            //f[16]-0.272633506647206E10*f[15]-0.178662858289518E10*f[21];
            //      s3 = s2+0.2022085540456989E10*f[20]-0.2244785163175151E10*f[19]+
            //0.2440439102228312E10*f[18]-0.9039343286669944E9*f[25];
            //      c[22] = s3+0.1105339140980451E10*f[24]-0.1321480858189034E10*f[23]+
            //0.1550261844813264E10*f[22]+0.7171568801689204E9*f[26]-0.2250712576715356E9*f
            //[29];
            //      s2 = 0.6365552877600042E8*f[30]+0.3129315951992167E9*f[28]
            //-0.430142947178329E9*f[27]-0.6366124045908291E8*f[0]-0.5384804650105949E9*f[4]+
            //0.4301582541003338E9*f[3]-0.3129477605175611E9*f[2];
            //      s1 = s2+0.1899343613066917E9*f[1]+0.7682292291581757E9*f[7]+
            //0.6341154032260393E9*f[5]-0.7124680419079097E9*f[6]-0.7451352614559461E9*f[10]+
            //0.7894404620047556E9*f[9]-0.7957041554142352E9*f[8]-0.5372121570103385E9*f[12];
            //      s2 = s1+0.6606941516493865E9*f[11]-0.1965645600284772E9*f[14]+
            //0.379593748818972E9*f[13]-0.3796705841914705E9*f[17]+0.1966465543318927E9*f[16]
            //-0.4188478792529907E5*f[15]-0.7894751107779531E9*f[21];
            //      s3 = s2+0.745182095949003E9*f[20]-0.6607526407123597E9*f[19]+
            //0.5372809228154435E9*f[18]-0.6341094897580039E9*f[25];
            //      c[23] = s3+0.7124700311905204E9*f[24]-0.7682408821344808E9*f[23]+
            //0.7957268616520251E9*f[22]+0.538468696192998E9*f[26]-0.1899207150267866E9*f[29]
            //;
            //      s2 = -0.6373508765241642E8*f[30]-0.3232393745459995E9*f[28]+
            //0.4586797055492774E9*f[27]-0.637453103514522E8*f[0]-0.5997964285547894E9*f[4]+
            //0.4587285309440771E9*f[3]-0.32327888822744E9*f[2];
            //      s1 = s2+0.1921569866404663E9*f[1]+0.1059971106064188E10*f[7]+
            //0.7472374261693234E9*f[5]-0.9010076236419321E9*f[6]-0.153548308416693E10*f[10]+
            //0.1381970910177477E10*f[9]-0.1221631645621118E10*f[8]-0.1794652489836843E10*f
            //[12];
            //      s2 = s1+0.1675475364412563E10*f[11]-0.1943359517455078E10*f[14]+
            //0.1885931365163146E10*f[13]+0.1885904441682651E10*f[17]-0.1943345706422226E10*f
            //[16]+0.1962963098990549E10*f[15]+0.1381908992927881E10*f[21];
            //      s3 = s2-0.153542662281689E10*f[20]+0.167542669619154E10*f[19]
            //-0.1794613780523074E10*f[18]+0.7471762340192081E9*f[25];
            //      c[24] = s3-0.9009431161953339E9*f[24]+0.1059905277719928E10*f[23]
            //-0.1221566633862848E10*f[22]-0.5997404556029132E9*f[26]+0.1921296288250085E9*f
            //[29];
            //      s2 = -0.3572160321304514E8*f[30]-0.1743072165930028E9*f[28]+
            //0.2378269891276953E9*f[27]+0.35724709776808E8*f[0]+0.2948245389190065E9*f[4]
            //-0.2378348031346065E9*f[3]+0.1743157482927045E9*f[2];
            //      s1 = s2-0.106321312794511E9*f[1]-0.4035135877243333E9*f[7]
            //-0.3430356539373138E9*f[5]+0.3800713033812572E9*f[6]+0.3726415657264774E9*f[10]
            //-0.401169379224652E9*f[9]+0.4111333470422015E9*f[8]+0.2615539390553906E9*f[12];
            //      s2 = s1-0.3256438250589177E9*f[11]+0.9426681787999093E8*f[14]
            //-0.183102837419356E9*f[13]+0.1831421163970574E9*f[17]-0.9430842454543178E8*f
            //[16]+0.2120117534732756E5*f[15]+0.401188643676316E9*f[21];
            //      s3 = s2-0.372666808646189E9*f[20]+0.3256746282438273E9*f[19]
            //-0.2615895293302838E9*f[18]+0.3430334437906054E9*f[25];
            //      c[25] = s3-0.3800735199180294E9*f[24]+0.403521030391637E9*f[23]
            //-0.4111465686127781E9*f[22]-0.2948189160933826E9*f[26]+0.1063139633695105E9*f
            //[29];
            //      s2 = 0.3576637700399129E8*f[30]+0.1800493960264623E9*f[28]
            //-0.253605822483624E9*f[27]+0.3577175947558759E8*f[0]+0.3283948300901491E9*f[4]
            //-0.2536305329955424E9*f[3]+0.1800697092382733E9*f[2];
            //      s1 = s2-0.1075651160057742E9*f[1]-0.5567505838126704E9*f[7]
            //-0.404229952037497E9*f[5]+0.4806481313638024E9*f[6]+0.7678942562565871E9*f[10]
            //-0.7022749111479234E9*f[9]+0.6312057111780073E9*f[8]+0.8737698311790298E9*f[12]
            //;
            //      s2 = s1-0.8258117699997964E9*f[11]+0.9319913369284317E9*f[14]
            //-0.9097125798166861E9*f[13]-0.9097009904848898E9*f[17]+0.9319854253927735E9*f
            //[16]-0.9395387470369507E9*f[15]-0.7022468079465203E9*f[21];
            //      s3 = s2+0.7678690563089745E9*f[20]-0.8257903678544664E9*f[19]+
            //0.8737530155858903E9*f[18]-0.4042000331131811E9*f[25];
            //      c[26] = s3+0.4806171702780281E9*f[24]-0.556719580827936E9*f[23]+
            //0.6311756635775598E9*f[22]+0.3283669727876903E9*f[26]-0.1075508471077801E9*f
            //[29];
            //      s2 = 0.1183010730363714E8*f[30]+0.5725728030496889E8*f[28]
            //-0.7750383651060975E8*f[27]-0.1183110473566723E8*f[0]-0.9509768978188325E8*f[4]
            //+0.7750618216316451E8*f[3]-0.572599349881269E8*f[2];
            //      s1 = s2+0.3511451752911404E8*f[1]+0.1249588538348504E9*f[7]+
            //0.1093035409807765E9*f[5]-0.1194491297381283E9*f[6]-0.1104390303735581E9*f[10]+
            //0.1205611419637895E9*f[9]-0.125405651180609E9*f[8]-0.757833378021992E8*f[12];
            //      s2 = s1+0.9532446967875852E8*f[11]-0.269763009085702E8*f[14]+
            //0.5264764791218905E8*f[13]-0.5265955242302746E8*f[17]+0.2698883360507316E8*f
            //[16]-0.6373124038689097E4*f[15]-0.1205674076365571E9*f[21];
            //      s3 = s2+0.1104470286103433E9*f[20]-0.9533404085829664E8*f[19]+
            //0.7579423593185368E8*f[18]-0.1093031351233792E9*f[25];
            //      c[27] = s3+0.1194501707122256E9*f[24]-0.1249615479327897E9*f[23]+
            //0.1254101174204003E9*f[22]+0.9509612685618742E8*f[26]-0.3511218168989122E8*f
            //[29];
            //      s2 = -0.1184497101226972E8*f[30]-0.5914366611654683E8*f[28]+
            //0.8264611133258189E8*f[27]-0.1184665063989994E8*f[0]-0.105925768035169E9*f[4]+
            //0.8265351585105175E8*f[3]-0.5914985225988961E8*f[2];
            //      s1 = s2+0.3552520095266614E8*f[1]+0.172412606880709E9*f[7]+
            //0.1288019892261192E9*f[5]-0.1510582480083201E9*f[6]-0.2275794120857956E9*f[10]+
            //0.2110506433410733E9*f[9]-0.1925329272908907E9*f[8]-0.2531691255193371E9*f[12];
            //      s2 = s1+0.2417370852910567E9*f[11]-0.2667106245904102E9*f[14]+
            //0.2615714381585258E9*f[13]+0.2615684641108547E9*f[17]-0.2667091150238961E9*f
            //[16]+0.2684398772216285E9*f[15]+0.2110430795878433E9*f[21];
            //      s3 = s2-0.2275727334060686E9*f[20]+0.2417314883577465E9*f[19]
            //-0.2531647755456077E9*f[18]+0.1287933353431073E9*f[25];
            //      c[28] = s3-0.1510494570778242E9*f[24]+0.1724039656055735E9*f[23]
            //-0.1925247018031741E9*f[22]-0.1059175634550651E9*f[26]+0.3552079060962712E8*f
            //[29];
            //      s2 = -0.1751946566563223E7*f[30]-0.8404353130710687E7*f[28]+
            //0.112804940057742E8*f[27]+0.175208980703921E7*f[0]+0.1369504265047711E8*f[4]
            //-0.1128080764430923E8*f[3]+0.8404722105719533E7*f[2];
            //      s1 = s2-0.5184536671689491E7*f[1]-0.172961084891235E8*f[7]
            //-0.1554858515500879E8*f[5]+0.1676554855421506E8*f[6]+0.1469680454459985E8*f[10]
            //-0.162401203903084E8*f[9]+0.1711854270691643E8*f[8]+0.9892864697498425E7*f[12];
            //      s2 = s1-0.1255177962685415E8*f[11]+0.3485380186465743E7*f[14]
            //-0.6828918002541173E7*f[13]+0.6830538138470441E7*f[17]-0.3487077028929515E7*f
            //[16]+0.8613988487202298E3*f[15]+0.1624102589759999E8*f[21];
            //      s3 = s2-0.1469793496099158E8*f[20]+0.1255310998759494E8*f[19]
            //-0.9894360810722562E7*f[18]+0.155485677066442E8*f[25];
            //      c[29] = s3-0.1676574063105175E8*f[24]+0.1729653278147233E8*f[23]
            //-0.1711920895017803E8*f[22]-0.136948518303577E8*f[26]+0.5184204720003599E7*f
            //[29];
            //      s2 = 0.1754152288971626E7*f[30]+0.8681261918874369E7*f[28]
            //-0.120289662320296E8*f[27]+0.1754387504619647E7*f[0]+0.1525436669075361E8*f[4]
            //-0.1202996094640722E8*f[3]+0.8682106942767339E7*f[2];
            //      s1 = s2-0.5245159448515863E7*f[1]-0.2386436976861272E8*f[7]
            //-0.1832223622634566E8*f[5]+0.2120208797013503E8*f[6]+0.3028542068734399E8*f[10]
            //-0.2842945873560149E8*f[9]+0.2628176216172181E8*f[8]+0.3304914983445308E8*f[12]
            //;
            //      s2 = s1-0.3183060298961245E8*f[11]+0.3445980192731111E8*f[14]
            //-0.3392855735095216E8*f[13]-0.3392821339333334E8*f[17]+0.3445962810735621E8*f
            //[16]-0.3463743282100571E8*f[15]-0.2842854494933629E8*f[21];
            //      s3 = s2+0.3028462530769371E8*f[20]-0.3182994454934077E8*f[19]+
            //0.3304864310595314E8*f[18]-0.1832111486858365E8*f[25];
            //      c[30] = s3+0.2120096974041691E8*f[24]-0.2386329036472219E8*f[23]+
            //0.2628075235658142E8*f[22]+0.1525328386358079E8*f[26]-0.5244547764134672E7*f
            //[29];

        }
        void generate24OrderCoefficientsForChebyshevPoints(const double* f, double* c)
        {
            //    double s2 = -0.8346775327673972E-7*f[24]-0.8419806867602276E-6*f[20]+0.6243150574805853E-6*f[21]-0.2531030991407435E-6*f[1]+0.4311074870257127E-6*f
            //[2]-0.6243501762642968E-6*f[3];
            //      double s1 = s2+0.8420196345108187E-6*f[4]-0.1097632125503747E-5*f[5]+
            //0.1412906656712996E-5*f[6]-0.1826191270129329E-5*f[7]+0.2413445828590818E-5*f
            //[8]-0.4310779461445833E-6*f[22];
            //      s2 = s1+0.1097590756891578E-5*f[19]-0.3351113674554524E-5*f[9]+
            //0.5167525254119933E-5*f[10]-0.1050258613128773E-4*f[11]+0.9999999998440385*f
            //[12]+0.1050275441456952E-4*f[13];
            //      c[0] = s2-0.5167526782915799E-5*f[14]+0.2530817183243376E-6*f[23]+
            //0.3351085029391676E-5*f[15]-0.2413407502077582E-5*f[16]+0.1826149502692432E-5*f
            //[17]-0.141286423897939E-5*f[18]+0.8347600822967823E-7*f[0];
            //      s2 = 0.6290939498238629E-1*f[24]+0.634598468631935*f[20]
            //-0.4705444483744061*f[21]+0.1907625344569513*f[1]-0.324923533057796*f[2]+
            //0.4705695372561039*f[3];
            //      s1 = s2-0.63462582890838*f[4]+0.8272795123408595*f[5]
            //-0.1064900024358799E1*f[6]+0.1376389939354268E1*f[7]-0.1818999445262527E1*f[8]+
            //0.3249021747697283*f[22];
            //      s2 = s1-0.8272511820250871*f[19]+0.2525711851848049E1*f[9]
            //-0.3894722308772296E1*f[10]+0.7915673306959517E1*f[11]+0.2555344507356564E-3*f
            //[12]-0.7915967737471501E1*f[13];
            //      c[1] = s2+0.3894765019044756E1*f[14]-0.1907469351337899*f[23]
            //-0.2525708468452571E1*f[15]+0.1818980578069647E1*f[16]-0.1376364673142161E1*f
            //[17]+0.106487218222788E1*f[18]-0.6291544943350267E-1*f[0];
            //      s2 = -0.6300903190080652E-1*f[24]-0.7513532050306537*f[20]+
            //0.5198533868627238*f[21]+0.194277456078782*f[1]-0.3417726558419694*f[2]+
            //0.5202508137489984*f[3];
            //      s1 = s2-0.7518838109502425*f[4]+0.1073998355293022E1*f[5]
            //-0.1556045011685924E1*f[6]+0.2342193503313038E1*f[7]-0.3776497005329212E1*f[8]
            //-0.3414947726769373*f[22];
            //      s2 = s1+0.1073312850960654E1*f[19]+0.6862001703221032E1*f[9]
            //-0.1566242441748037E2*f[10]+0.6315952292327778E2*f[11]-0.1040001654014503E3*f
            //[12]+0.6315696867883077E2*f[13];
            //      c[2] = s2-0.156596926871889E2*f[14]+0.1941115416469586*f[23]+
            //0.6860050654654771E1*f[15]-0.37750444441006E1*f[16]+0.2341075802637229E1*f[17]
            //-0.1555170624329552E1*f[18]-0.63064602560251E-1*f[0];
            //      s2 = -0.6479445165642119E1*f[24]-0.6510835761813517E2*f[20]+
            //0.483620946726252E2*f[21]-0.1964158124941131E2*f[1]+0.3343278732774313E2*f[2]
            //-0.4836440892903497E2*f[3];
            //      s1 = s2+0.6511078358135489E2*f[4]-0.846434809955473E2*f[5]+
            //0.1084768935901824E3*f[6]-0.1391603312834681E3*f[7]+0.1813377149273988E3*f[8]
            //-0.3343076365433917E2*f[22];
            //      s2 = s1+0.8464112495121413E2*f[19]-0.2440350098874802E3*f[9]+
            //0.3420744588809566E3*f[10]-0.3193121525687204E3*f[11]-0.1501916247352431E-1*f
            //[12]+0.3193351379383312E3*f[13];
            //      c[3] = s2-0.3420849123656719E3*f[14]+0.1964007413082203E2*f[23]+
            //0.2440379396089023E3*f[15]-0.1813376880473773E3*f[16]+0.1391589443604569E3*f
            //[17]-0.1084748395987625E3*f[18]+0.6480036556076354E1*f[0];
            //      s2 = 0.6491045002468873E1*f[24]+0.7710052099459392E2*f[20]
            //-0.5343998327856714E2*f[21]-0.1999943638559943E2*f[1]+0.3515957090906425E2*f[2]
            //-0.5346060869577345E2*f[3];
            //      s1 = s2+0.7712772127418567E2*f[4]-0.1098692639898927E3*f[5]+
            //0.1584856026767016E3*f[6]-0.2367799591261819E3*f[7]+0.3764461235688149E3*f[8]+
            //0.3514495180197156E2*f[22];
            //      s2 = s1-0.1098345659552298E3*f[19]-0.6629612251454515E3*f[9]+
            //0.1375575186138797E4*f[10]-0.2547833286204842E4*f[11]+0.320320981806424E4*f[12]
            //-0.2547765135308199E4*f[13];
            //      c[4] = s2+0.1375481339640452E4*f[14]-0.1999056084271216E2*f[23]
            //-0.6628762900265595E3*f[15]+0.376377783825872E3*f[16]-0.2367254209728421E3*f
            //[17]+0.1584420110167298E3*f[18]+0.6494061017958467E1*f[0];
            //      s2 = 0.1950078438507279E3*f[24]+0.1941432877012758E4*f[20]
            //-0.1448189331867976E4*f[21]+0.5906931803097104E3*f[1]-0.1003830746142666E4*f[2]
            //+0.1448251396145882E4*f[3];
            //      s1 = s2-0.1941494844965077E4*f[4]+0.2507362178112309E4*f[5]
            //-0.3179586081870712E4*f[6]+0.4006042035015615E4*f[7]-0.5045246320475709E4*f[8]+
            //0.1003774766752293E4*f[22];
            //      s2 = s1-0.2507307023507265E4*f[19]+0.6289503217072273E4*f[9]
            //-0.694441612562331E4*f[10]+0.5027554048583728E4*f[11]+0.3079897098252089*f[12]
            //-0.502807708271409E4*f[13];
            //      c[5] = s2+0.694474001609734E4*f[14]-0.5906505870363947E3*f[23]
            //-0.6289652715290493E4*f[15]+0.5045291875720469E4*f[16]-0.4006032512921477E4*f
            //[17]+0.3179546700480654E4*f[18]-0.1950247524484169E3*f[0];
            //      s2 = -0.1953702451554702E3*f[24]-0.2299151721215803E4*f[20]+
            //0.1600343295840254E4*f[21]+0.6014149640347414E3*f[1]-0.1055609818903742E4*f[2]+
            //0.1600756882302966E4*f[3];
            //      s1 = s2-0.2299689210428234E4*f[4]+0.3254448919714194E4*f[5]
            //-0.4645191681618258E4*f[6]+0.6815985804777527E4*f[7]-0.1047332155763567E5*f[8]
            //-0.1055312275282843E4*f[22];
            //      s2 = s1+0.3253774449320097E4*f[19]+0.1708614643217551E5*f[9]
            //-0.2792531365780817E5*f[10]+0.4011602606646171E5*f[11]-0.4576020314247201E5*f
            //[12]+0.4011520466906699E5*f[13];
            //      c[6] = s2-0.2792403263299749E5*f[14]+0.6012312429838521E3*f[23]+
            //0.1708480457118368E5*f[15]-0.104721253312296E5*f[16]+0.6814979545437508E4*f[17]
            //-0.4644362021851161E4*f[18]-0.1954335467005697E3*f[0];
            //      s2 = -0.2682986310100488E4*f[24]-0.2631625005179897E5*f[20]+
            //0.1976350294981627E5*f[21]-0.8117084373949278E4*f[1]+0.1375865387487101E5*f[2]
            //-0.1976425929108014E5*f[3];
            //      s1 = s2+0.263169613294069E5*f[4]-0.3363280407545813E5*f[5]+
            //0.41944352683892E5*f[6]-0.5138799046258564E5*f[7]+0.6149805597390087E5*f[8]
            //-0.1375794693022314E5*f[22];
            //      s2 = s1+0.3363224338319568E5*f[19]-0.6916358571883527E5*f[9]+
            //0.6593501901000901E5*f[10]-0.4215481505299045E5*f[11]-0.3151999759730396E1*f
            //[12]+0.4216044951500431E5*f[13];
            //      c[7] = s2-0.6593906233958625E5*f[14]+0.8116533689043676E4*f[23]+
            //0.691659318337307E5*f[15]-0.6149911225825568E5*f[16]+0.5138821953576337E5*f[17]
            //-0.4194408253748882E5*f[18]+0.2683207623478201E4*f[0];
            //      s2 = 0.2688062632041035E4*f[24]+0.3116601557126258E5*f[20]
            //-0.2184061067030555E5*f[21]-0.8264146532070682E4*f[1]+0.1446788553953236E5*f[2]
            //-0.2184484279692684E5*f[3];
            //      s1 = s2+0.3117142257861424E5*f[4]-0.4365285988290669E5*f[5]+
            //0.6127697175258386E5*f[6]-0.8743138238608394E5*f[7]+0.1276609730821729E6*f[8]+
            //0.1446479080553121E5*f[22];
            //      s2 = s1-0.4364620930494714E5*f[19]-0.187889645885789E6*f[9]+
            //0.2651424912681197E6*f[10]-0.3363674226217224E6*f[11]+0.3660820960346592E6*f
            //[12]-0.3363618529562915E6*f[13];
            //      c[8] = s2+0.2651331540771849E6*f[14]-0.8262202276892083E4*f[23]
            //-0.1878789026551617E6*f[15]+0.1276505479062992E6*f[16]-0.8742207768412608E5*f
            //[17]+0.612690027560464E5*f[18]+0.2688741649175998E4*f[0];
            //      s2 = 0.2033659473102522E5*f[24]+0.1954025046397122E6*f[20]
            //-0.1481197352374991E6*f[21]+0.6142167622453145E5*f[1]-0.1037364202283106E6*f[2]
            //+0.148124777887665E6*f[3];
            //      s1 = s2-0.1954069091374391E6*f[4]+0.2461985038994837E6*f[5]
            //-0.300327037881201E6*f[6]+0.3551258623338267E6*f[7]-0.4009131839531138E6*f[8]+
            //0.1037315103497765E6*f[22];
            //      s2 = s1-0.2461955967007988E6*f[19]+0.4142255797217669E6*f[9]
            //-0.3596432320046839E6*f[10]+0.214058121379289E6*f[11]+0.1873775762211287E2*f
            //[12]-0.2140926186849761E6*f[13];
            //      c[9] = s2+0.3596701807603297E6*f[14]-0.6141775200136809E5*f[23]
            //-0.4142434391184081E6*f[15]+0.4009229701487384E6*f[16]-0.3551296249546195E6*f
            //[17]+0.3003267225517953E6*f[18]-0.2033819248314412E5*f[0];
            //      s2 = -0.2037547713925098E5*f[24]-0.2314165404968664E6*f[20]+
            //0.1636897276439226E6*f[21]+0.6253327178931117E5*f[1]-0.1090817865864075E6*f[2]+
            //0.163714991292407E6*f[3];
            //      s1 = s2-0.2314481985412206E6*f[4]+0.3195426717156682E6*f[5]
            //-0.4387458876995366E6*f[6]+0.6042046384607995E6*f[7]-0.8322324720255998E6*f[8]
            //-0.1090629808602241E6*f[22];
            //      s2 = s1+0.319504623553395E6*f[19]+0.1125282671700742E7*f[9]
            //-0.1446227471093998E7*f[10]+0.1708062737903374E7*f[11]-0.1810444554215539E7*f
            //[12]+0.1708039182554975E7*f[13];
            //      c[10] = s2-0.1446186112144857E7*f[14]+0.6252124340301869E5*f[23]+
            //0.1125231941749576E7*f[15]-0.8321798963431164E6*f[16]+0.6041550536896457E6*f
            //[17]-0.4387016437439292E6*f[18]-0.2037973456628868E5*f[0];
            //      s2 = -0.9347805386857869E5*f[24]-0.8748194361590181E6*f[20]+
            //0.6709859920024977E6*f[21]-0.281704579221568E6*f[1]+0.4735614938252161E6*f[2]
            //-0.6710062173863011E6*f[3];
            //      s1 = s2+0.8748355479427218E6*f[4]-0.1083032412460978E7*f[5]+
            //0.1287017956918686E7*f[6]-0.146395009423327E7*f[7]+0.1565703318826229E7*f[8]
            //-0.4735408591948689E6*f[22];
            //      s2 = s1+0.1083024433932259E7*f[19]-0.1515886787825974E7*f[9]+
            //0.1235856531966667E7*f[10]-0.7030000357525482E6*f[11]-0.7000121022996468E2*f
            //[12]+0.7031313416956221E6*f[13];
            //      c[11] = s2-0.1235964823967389E7*f[14]+0.2816876176315777E6*f[23]+
            //0.1515965020529081E7*f[15]-0.156575181719915E7*f[16]+0.1463973706010395E7*f[17]
            //-0.1287022898321531E7*f[18]+0.9348505552045172E5*f[0];
            //      s2 = 0.9365799954189321E5*f[24]+0.1036065434229377E7*f[20]
            //-0.7415269059447511E6*f[21]-0.2867991432905643E6*f[1]+0.4979572453574796E6*f[2]
            //-0.7416215154520808E6*f[3];
            //      s1 = s2+0.103618146894394E7*f[4]-0.140566235213529E7*f[5]+
            //0.1880182805043742E7*f[6]-0.2490724963927893E7*f[7]+0.3250144165146748E7*f[8]+
            //0.4978854465015962E6*f[22];
            //      s2 = s1-0.1405526423621032E7*f[19]-0.4118049767218203E7*f[9]+
            //0.4969749676432469E7*f[10]-0.5609608650430795E7*f[11]+0.5849135226674932E7*f
            //[12]-0.5609543039906142E7*f[13];
            //      c[12] = s2+0.4969630764134098E7*f[14]-0.2867523541413871E6*f[23]
            //-0.4117897076244106E7*f[15]+0.324997762739158E7*f[16]-0.2490560172238359E7*f
            //[17]+0.1880029721384809E7*f[18]+0.9367478376793793E5*f[0];
            //      s2 = 0.2741218762980429E6*f[24]+0.2484755821468282E7*f[20]
            //-0.1932749834432056E7*f[21]+0.8238266287848307E6*f[1]-0.1376941147788582E7*f[2]
            //+0.1932801117002883E7*f[3];
            //      s1 = s2-0.2484792159445241E7*f[4]+0.3014559429777975E7*f[5]
            //-0.3482149977180216E7*f[6]+0.3813239291385037E7*f[7]-0.3893128636113324E7*f[8]+
            //0.1376885960112531E7*f[22];
            //      s2 = s1-0.3014549465924477E7*f[19]+0.3586745466715992E7*f[9]
            //-0.2797243315998993E7*f[10]+0.1543214747846772E7*f[11]+0.1711956628453715E3*f
            //[12]-0.15435399656376E7*f[13];
            //      c[13] = s2+0.2797521680335779E7*f[14]-0.8237798571858373E6*f[23]
            //-0.3586958993077064E7*f[15]+0.3893272802206862E7*f[16]-0.3813320045204614E7*f
            //[17]+0.3482178846655018E7*f[18]-0.274141466264844E6*f[0];
            //      s2 = -0.2746520777043452E6*f[24]-0.2942764795901888E7*f[20]+
            //0.2135957188224824E7*f[21]+0.8387178395897634E6*f[1]-0.1447862578139503E7*f[2]+
            //0.2136188171538959E7*f[3];
            //      s1 = s2-0.2943041551934764E7*f[4]+0.3912558115388165E7*f[5]
            //-0.5086990318937171E7*f[6]+0.648772188992598E7*f[7]-0.8081489035536631E7*f[8]
            //-0.1447683600688504E7*f[22];
            //      s2 = s1+0.3912242642612884E7*f[19]+0.974374338332667E7*f[9]
            //-0.1124860099993528E8*f[10]+0.12314262992863E8*f[11]-0.1270099304272227E8*f[12]
            //+0.1231413938697341E8*f[13];
            //      c[14] = s2-0.1124837178586566E8*f[14]+0.8385989073023453E6*f[23]+
            //0.9743438819905471E7*f[15]-0.8081143183683599E7*f[16]+0.6487365323450497E7*f
            //[17]-0.5086646368485297E7*f[18]-0.2746953215670533E6*f[0];
            //      s2 = -0.5238155687237461E6*f[24]-0.4574679295703158E7*f[20]+
            //0.3615745660041225E7*f[21]-0.1569035198675677E7*f[1]+0.2604484616437978E7*f[2]
            //-0.3615829509949611E7*f[3];
            //      s1 = s2+0.4574730217199384E7*f[4]-0.5429432217921708E7*f[5]+
            //0.6094143051249458E7*f[6]-0.6443998866514576E7*f[7]+0.6328042773401491E7*f[8]
            //-0.2604388706385981E7*f[22];
            //      s2 = s1+0.5429434494672454E7*f[19]-0.5610626683279643E7*f[9]+
            //0.4235864073793772E7*f[10]-0.2286748734153526E7*f[11]-0.2782191371715108E3*f
            //[12]+0.2287282064106043E7*f[13];
            //      c[15] = s2-0.4236332930376886E7*f[14]+0.1568951171532474E7*f[23]+
            //0.561100241523016E7*f[15]-0.6328312818333575E7*f[16]+0.6444165355378898E7*f[17]
            //-0.6094218451278916E7*f[18]+0.5238513073908352E6*f[0];
            //      s2 = 0.5248322670526937E6*f[24]+0.5417946184494988E7*f[20]
            //-0.3995924444495132E7*f[21]-0.1597386026687689E7*f[1]+0.273861540395369E7*f[2]
            //-0.3996297282612326E7*f[3];
            //      s1 = s2+0.5418381946474186E7*f[4]-0.7046761089237954E7*f[5]+
            //0.8902761258338941E7*f[6]-0.109635907256251E8*f[7]+0.1313596190719241E8*f[8]+
            //0.2738320021443232E7*f[22];
            //      s2 = s1-0.7046278188551499E7*f[19]-0.1524183615908249E8*f[9]+
            //0.1703382158839425E8*f[10]-0.1824757235750329E8*f[11]+0.1867795004583693E8*f
            //[12]-0.1824741394929836E8*f[13];
            //      c[16] = s2+0.1703352271811738E8*f[14]-0.1597185695155442E7*f[23]
            //-0.1524142839265436E8*f[15]+0.1313548354628158E8*f[16]-0.1096307992836951E8*f
            //[17]+0.8902251237890329E7*f[18]+0.5249061138025441E6*f[0];
            //      s2 = 0.6491469380446767E6*f[24]+0.5436096692782778E7*f[20]
            //-0.437255799729515E7*f[21]+0.1936867624736801E7*f[1]-0.318936359293526E7*f[2]+
            //0.4372645841839527E7*f[3];
            //      s1 = s2-0.5436139680778001E7*f[4]+0.6306374611302132E7*f[5]
            //-0.688486721639148E7*f[6]+0.7055846384634001E7*f[7]-0.670835133275629E7*f[8]+
            //0.3189255832318639E7*f[22];
            //      s2 = s1-0.6306398895196227E7*f[19]+0.5771375795623073E7*f[9]
            //-0.4251887163042998E7*f[10]+0.2259074053727234E7*f[11]+0.2977923078552207E3*f
            //[12]-0.2259648749530139E7*f[13];
            //      c[17] = s2+0.4252402578374157E7*f[14]-0.1936769757231487E7*f[23]
            //-0.5771802735481481E7*f[15]+0.6708673137927759E7*f[16]-0.705605930093792E7*f
            //[17]+0.6884978380108908E7*f[18]-0.6491892421511065E6*f[0];
            //      s2 = -0.6504102547433552E6*f[24]-0.6438175773099617E7*f[20]+
            //0.483233290456636E7*f[21]+0.1971854901091321E7*f[1]-0.3353599719001714E7*f[2]+
            //0.4832727124505535E7*f[3];
            //      s1 = s2-0.643862471169624E7*f[4]+0.8184903979714416E7*f[5]
            //-0.100578863458486E8*f[6]+0.1200455309881481E8*f[7]-0.1392542076739082E8*f[8]
            //-0.3353279969657926E7*f[22];
            //      s2 = s1+0.8184420474100854E7*f[19]+0.1567855383057132E8*f[9]
            //-0.1709832584724739E8*f[10]+0.1802691718997354E8*f[11]-0.1835028455589075E8*f
            //[12]+0.180267812015978E8*f[13];
            //      c[18] = s2-0.1709806578154495E8*f[14]+0.1971633367683418E7*f[23]+
            //0.1567819141998963E8*f[15]-0.1392498403336204E8*f[16]+0.1200407240732636E8*f
            //[17]-0.1005739107341479E8*f[18]-0.6504930670371471E6*f[0];
            //      s2 = -0.5027074300237462E6*f[24]-0.4019825985290653E7*f[20]+
            //0.3293991158269397E7*f[21]-0.1493139899923985E7*f[1]+0.2436264495721867E7*f[2]
            //-0.32940478533072E7*f[3];
            //      s1 = s2+0.4019845783566756E7*f[4]-0.4558180836172423E7*f[5]+
            //0.4848507135534733E7*f[6]-0.483386085477406E7*f[7]+0.4473610116782289E7*f[8]
            //-0.2436189093819542E7*f[22];
            //      s2 = s1+0.4558212878916429E7*f[19]-0.3757455943528917E7*f[9]+
            //0.2716339102536761E7*f[10]-0.1425884563703739E7*f[11]-0.2016871486353634E3*f
            //[12]+0.1426275797398342E7*f[13];
            //      c[19] = s2-0.2716695422712694E7*f[14]+0.1493068703854703E7*f[23]+
            //0.3757758798161023E7*f[15]-0.4473847069932512E7*f[16]+0.4834026398553774E7*f
            //[17]-0.4848602462180331E7*f[18]+0.5027387332223626E6*f[0];
            //      s2 = 0.5036878012733439E6*f[24]+0.4760846051927605E7*f[20]
            //-0.3640366742307682E7*f[21]-0.1520105767517124E7*f[1]+0.2561710370230027E7*f[2]
            //-0.3640629068210445E7*f[3];
            //      s1 = s2+0.4761136893175927E7*f[4]-0.5915948874750833E7*f[5]+
            //0.7083021332648635E7*f[6]-0.8224144941182437E7*f[7]+0.9286473912650071E7*f[8]+
            //0.2561492290229841E7*f[22];
            //      s2 = s1-0.5915644429303485E7*f[19]-0.102075455180108E8*f[9]+
            //0.1092339345423701E8*f[10]-0.1137835531853186E8*f[11]+0.115344752679047E8*f[12]
            //-0.1137828055043592E8*f[13];
            //      c[20] = s2+0.1092324888886468E8*f[14]-0.1519951272922518E7*f[23]
            //-0.1020734051427756E8*f[15]+0.9286221183362466E7*f[16]-0.8223859295217383E7*f
            //[17]+0.7082718461031755E7*f[18]+0.5037463851319794E6*f[0];
            //      s2 = 0.220942134431735E6*f[24]+0.1681119013632777E7*f[20]
            //-0.1404197481532498E7*f[21]+0.6528322158785222E6*f[1]-0.1054286234837682E7*f[2]
            //+0.1404217891835839E7*f[3];
            //      s1 = s2-0.168112263630567E7*f[4]+0.1864322451020882E7*f[5]
            //-0.1936076254391038E7*f[6]+0.1884235805017824E7*f[7]-0.1704898962626492E7*f[8]+
            //0.1054256402216973E7*f[22];
            //      s2 = s1-0.1864341079558312E7*f[19]+0.1404426040819282E7*f[9]
            //-0.1000254388287675E7*f[10]+0.5201596267798558E6*f[11]+0.7833077253726051E2*f
            //[12]-0.5203121886118722E6*f[13];
            //      c[21] = s2+0.1000395035179674E7*f[14]-0.6528028391934741E6*f[23]
            //-0.1404548061216313E7*f[15]+0.1704997331281145E7*f[16]-0.1884307568589982E7*f
            //[17]+0.1936120699618151E7*f[18]-0.2209552833341875E6*f[0];
            //      s2 = -0.2213737336623144E6*f[24]-0.1991023075548816E7*f[20]+
            //0.1551858187802026E7*f[21]+0.6646201671557926E6*f[1]-0.1108569313653533E7*f[2]+
            //0.1551957762630941E7*f[3];
            //      s1 = s2-0.1991130495753145E7*f[4]+0.2419653452961439E7*f[5]
            //-0.282834588473751E7*f[6]+0.3205765382511314E7*f[7]-0.3539090151767798E7*f[8]
            //-0.1108484383883855E7*f[22];
            //      s2 = s1+0.2419544133157087E7*f[19]+0.3815286044884284E7*f[9]
            //-0.4022404441029408E7*f[10]+0.4150837089972489E7*f[11]-0.419435835535465E7*f
            //[12]+0.4150813321536026E7*f[13];
            //      c[22] = s2-0.4022358058884447E7*f[14]+0.6645585901041556E6*f[23]+
            //0.3815219287670913E7*f[15]-0.3539006211797403E7*f[16]+0.3205668237882801E7*f
            //[17]-0.2828240124414688E7*f[18]-0.221397427781701E6*f[0];
            //      s2 = -0.4205273167960653E5*f[24]-0.3036100874767045E6*f[20]+
            //0.2585391180320868E6*f[21]-0.1235228354780312E6*f[1]+0.1972289819189019E6*f[2]
            //-0.2585422311918318E6*f[3];
            //      s1 = s2+0.3036099573439532E6*f[4]-0.3296003196966834E6*f[5]+
            //0.3348802011061261E6*f[6]-0.3191178245394165E6*f[7]+0.2833036000580147E6*f[8]
            //-0.1972238906944327E6*f[22];
            //      s2 = s1+0.3296045279855567E6*f[19]-0.2296878922800916E6*f[9]+
            //0.1616396186832835E6*f[10]-0.8343456368930552E5*f[11]-0.1329023508845093E2*f
            //[12]+0.8346053271964696E5*f[13];
            //      c[23] = s2-0.1616637953972556E6*f[14]+0.1235175898700306E6*f[23]+
            //0.229709219465946E6*f[15]-0.2833212190054686E6*f[16]+0.3191311392099777E6*f[17]
            //-0.3348889289187606E6*f[18]+0.4205512388915265E5*f[0];
            //      s2 = 0.4213499200770452E5*f[24]+0.3595793760386294E6*f[20]
            //-0.2857268219425359E6*f[21]-0.1257529188723844E6*f[1]+0.207383413763928E6*f[2]
            //-0.2857432513660375E6*f[3];
            //      s1 = s2+0.35959661477684E6*f[4]-0.4277787601795363E6*f[5]+
            //0.4892143864350267E6*f[6]-0.5429345940732197E6*f[7]+0.588092166226281E6*f[8]+
            //0.2073690243857768E6*f[22];
            //      s2 = s1-0.4277616986011749E6*f[19]-0.6239749305145568E6*f[9]+
            //0.6500169911652428E6*f[10]-0.6658076542383287E6*f[11]+0.6710979052251704E6*f
            //[12]-0.665804336900138E6*f[13];
            //      c[24] = s2+0.6500104655394725E6*f[14]-0.1257422322772424E6*f[23]
            //-0.6239654148454245E6*f[15]+0.5880799884899924E6*f[16]-0.5429201934908325E6*f
            //[17]+0.4891983170576366E6*f[18]+0.4213916618971038E5*f[0];

        }

        void generate18OrderCoefficientsForChebyshevPoints(const double* f, double* c)
        {
            //  double s1 = 0.0;
            //  double s2 = 0.0;
            //
            //      s2 = -0.8668172981600195E-6*f[15]+0.5819668500549638E-6*f[16]
            //-0.1099424853057189E-6*f[0]+0.3359934548384527E-6*f[1];
            //      s1 = s2-0.5819917157597783E-6*f[2]-0.3359749307894119E-6*f[17]+
            //0.8668458980731262E-6*f[3]-0.1221410004140007E-5*f[4]+0.1704676504630808E-5*f
            //[5];
            //      s2 = s1-0.245171221567263E-5*f[6]+0.38648257403237E-5*f[7]
            //-0.7951007191142561E-5*f[8]+0.9999999999147656*f[9];
            //      c[0] = s2+0.7951094808143709E-5*f[10]-0.3864817394512592E-5*f[11]+
            //0.2451687071316472E-5*f[12]+0.1099351980742603E-6*f[18]-0.1704646741095112E-5*f
            //[13]+0.1221379685513475E-5*f[14];
            //      s2 = 0.6533177614663003*f[15]-0.4386267196201018*f[16]+
            //0.8286310053938992E-1*f[0]-0.2532365746690757*f[1];
            //      s1 = s2+0.4386441897900403*f[2]+0.2532233063471919*f[17]
            //-0.6533372462348331*f[3]+0.920570168264817*f[4]-0.1284805078981759E1*f[5];
            //      s2 = s1+0.1847840526704369E1*f[6]-0.291289177923274E1*f[7]+
            //0.5992593970157092E1*f[8]+0.1438486372795711E-3*f[9];
            //      c[1] = s2-0.5992756620579347E1*f[10]+0.2912909294578255E1*f[11]
            //-0.1847831877909427E1*f[12]-0.8285782881349868E-1*f[18]+0.1284788197048836E1*f
            //[13]-0.9205506374927884*f[14];
            //      s2 = -0.780246804311033*f[15]+0.4788711264873901*f[16]+
            //0.8316560584504053E-1*f[0]-0.2612867212841337*f[1];
            //      s1 = s2+0.4790856777829739*f[2]-0.2611600379433459*f[17]
            //-0.7805607065139228*f[3]+0.1251449037324291E1*f[4]-0.2092076774155835E1*f[5];
            //      s2 = s1+0.3882853397071584E1*f[6]-0.8971663082341052E1*f[7]+
            //0.3640928742612671E2*f[8]-0.6000009362738712E2*f[9];
            //      c[2] = s2+0.3640817638663207E2*f[10]-0.8970484556041047E1*f[11]+
            //0.3882028440653359E1*f[12]+0.8312330292212616E-1*f[18]-0.209148222802765E1*f
            //[13]+0.1251014137159596E1*f[14];
            //      s2 = -0.382670542858049E2*f[15]+0.2579469111797389E2*f[16]
            //-0.4888349779055165E1*f[0]+0.1492470460058996E2*f[1];
            //      s1 = s2-0.2579558191507127E2*f[2]-0.1492399741032717E2*f[17]+
            //0.3826797428422567E2*f[3]-0.5353342045040129E2*f[4]+0.736824837715771E2*f[5];
            //      s2 = s1-0.1027127707224731E3*f[6]+0.1471439104467265E3*f[7]
            //-0.138354814235238E3*f[8]-0.47671503295438E-2*f[9];
            //      c[3] = s2+0.1383620090119189E3*f[10]-0.1471469490663791E3*f[11]+
            //0.1027133269447257E3*f[12]+0.4888062666674444E1*f[18]-0.7368209418060072E2*f
            //[13]+0.5353263635126797E2*f[14];
            //      s2 = 0.4570624334617887E2*f[15]-0.2816443629193413E2*f[16]
            //-0.4905614285925108E1*f[0]+0.1539737357644762E2*f[1];
            //      s1 = s2-0.2817078745877529E2*f[2]+0.1539353043744082E2*f[17]+
            //0.4571532281676371E2*f[3]-0.7276855675780165E2*f[4]+0.1199702923379752E3*f[5];
            //      s2 = s1-0.2158180184676791E3*f[6]+0.4531861289774183E3*f[7]
            //-0.840610337378833E3*f[8]+0.1056003141922638E4*f[9];
            //      c[4] = s2-0.8405934882270751E3*f[10]+0.4531630551216799E3*f[11]
            //-0.2157974494945714E3*f[12]-0.4904305059943795E1*f[18]+0.1199542171424297E3*f
            //[13]-0.7275631225643326E2*f[14];
            //      s2 = 0.6353080772050835E3*f[15]-0.4324356801990295E3*f[16]+
            //0.8258138419392573E2*f[0]-0.2515355839721039E3*f[1];
            //      s1 = s2+0.4324485714407087E3*f[2]+0.2515247943617686E3*f[17]
            //-0.635320089206794E3*f[3]+0.8732193766235334E3*f[4]-0.1161437635895717E4*f[5];
            //      s2 = s1+0.1497882289580752E4*f[6]-0.1680330214358578E4*f[7]+
            //0.1221128871164181E4*f[8]+0.5411439026106502E-1*f[9];
            //      c[5] = s2-0.1221219759884169E4*f[10]+0.1680383846051906E4*f[11]
            //-0.1497903270648184E4*f[12]-0.8257689687838671E2*f[18]+0.1161439453110818E4*f
            //[13]-0.8732116470799764E3*f[14];
            //      s2 = -0.7588374172792907E3*f[15]+0.4721800314224239E3*f[16]+
            //0.8286982057021994E2*f[0]-0.2594919926519745E3*f[1];
            //      s1 = s2+0.4722508648169759E3*f[2]-0.2594479532362842E3*f[17]
            //-0.7589358049115666E3*f[3]+0.1186944044203544E4*f[4]-0.1891019210710896E4*f[5];
            //      s2 = s1+0.3147274781008378E4*f[6]-0.5175206708491747E4*f[7]+
            //0.74193484359546E4*f[8]-0.8448036062353642E4*f[9];
            //      c[6] = s2+0.7419235694803601E4*f[10]-0.517503132384037E4*f[11]+
            //0.3147092882565071E4*f[12]+0.8285451067381688E2*f[18]-0.1890860762112719E4*f
            //[13]+0.1186816169569859E4*f[14];
            //      s2 = -0.4612806478703086E4*f[15]+0.3189920480267904E4*f[16]
            //-0.6168775611496624E3*f[0]+0.1871671635950485E4*f[1];
            //      s1 = s2-0.3190002058443667E4*f[2]-0.1871598938378981E4*f[17]+
            //0.461287262846206E4*f[3]-0.6163724043703566E4*f[4]+0.7775336881201679E4*f[5];
            //      s2 = s1-0.8998025389425742E4*f[6]+0.8669912591156478E4*f[7]
            //-0.5549876395566748E4*f[8]-0.2969580001334201*f[9];
            //      c[7] = s2+0.5550402431799944E4*f[10]-0.8670276399616614E4*f[11]+
            //0.8998215047490166E4*f[12]+0.6168465056038437E3*f[18]-0.7775394843594419E4*f
            //[13]+0.616370086465006E4*f[14];
            //      s2 = 0.5509804967453018E4*f[15]-0.3483159881197437E4*f[16]
            //-0.619020359846367E3*f[0]+0.1930839536324377E4*f[1];
            //      s1 = s2-0.3483548030927593E4*f[2]+0.1930590844528756E4*f[17]+
            //0.5510325919007231E4*f[3]-0.8378080976843747E4*f[4]+0.1265946099785756E5*f[5];
            //      s2 = s1-0.1890611086962993E5*f[6]+0.267022701553701E5*f[7]
            //-0.3372029250405302E5*f[8]+0.3660819986019933E5*f[9];
            //      c[8] = s2-0.3371988338497859E5*f[10]+0.2670158401301097E5*f[11]
            //-0.189053250936572E5*f[12]-0.6189320724856396E3*f[18]+0.1265871065513528E5*f
            //[13]-0.8377433775267088E4*f[14];
            //      s2 = 0.173352473935818E5*f[15]-0.1225379000295948E5*f[16]+
            //0.2412331114242982E4*f[0]-0.7278760223123779E4*f[1];
            //      s1 = s2+0.1225405666203615E5*f[2]+0.7278504321303748E4*f[17]
            //-0.1733542563764452E5*f[3]+0.2231295017259676E5*f[4]-0.2642364879447577E5*f[5];
            //      s2 = s1+0.2792326007319002E5*f[6]-0.2439953458662912E5*f[7]+
            //0.1451252608316113E5*f[8]+0.9005218599424126*f[9];
            //      c[9] = s2-0.1451417135456193E5*f[10]+0.2440078182198368E5*f[11]
            //-0.2792402250267847E5*f[12]-0.2412218502312917E4*f[18]+0.2642397894210188E5*f
            //[13]-0.2231296550167212E5*f[14];
            //      s2 = -0.2070640931422086E5*f[15]+0.1338037552143891E5*f[16]+
            //0.2420683537057051E4*f[0]-0.7508777861268376E4*f[1];
            //      s1 = s2+0.1338154959569494E5*f[2]-0.7508000231875756E4*f[17]
            //-0.2070792455038891E5*f[3]+0.3032881028964032E5*f[4]-0.4302162814417217E5*f[5];
            //      s2 = s1+0.5867058915641031E5*f[6]-0.7514773235519706E5*f[7]+
            //0.8817685320823065E5*f[8]-0.9318461148899882E5*f[9];
            //      c[10] = s2+0.881759764078835E5*f[10]-0.7514618787225298E5*f[11]+
            //0.5866869380343918E5*f[12]+0.2420401346877684E4*f[18]-0.4301968065855374E5*f
            //[13]+0.3032701961025612E5*f[14];
            //      s2 = -0.3614510959603716E5*f[15]+0.2626217398118607E5*f[16]
            //-0.5292596392282084E4*f[0]+0.1585198734442622E5*f[1];
            //      s1 = s2-0.2626265532031436E5*f[2]-0.1585148331853164E5*f[17]+
            //0.3614535117327234E5*f[3]-0.4456006571319824E5*f[4]+0.4968085733722538E5*f[5];
            //      s2 = s1-0.489198243875655E5*f[6]+0.4000069938656125E5*f[7]
            //-0.2270439971434185E5*f[8]-0.158924677275839E1*f[9];
            //      c[11] = s2+0.2270736127843204E5*f[10]-0.4000308097760982E5*f[11]+
            //0.4892143626479337E5*f[12]+0.5292367212380223E4*f[18]-0.4968169886652852E5*f
            //[13]+0.4456026955490504E5*f[14];
            //      s2 = 0.4317443233564017E5*f[15]-0.286768406405815E5*f[16]
            //-0.5310882666488155E4*f[0]+0.1635281513303801E5*f[1];
            //      s1 = s2-0.2867889393626547E5*f[2]+0.1635140496159462E5*f[17]+
            //0.4317697118539485E5*f[3]-0.6056789033101923E5*f[4]+0.8088763311276161E5*f[5];
            //      s2 = s1-0.1027872156333632E6*f[6]+0.1231978003514151E6*f[7]
            //-0.137951030681244E6*f[8]+0.1433610879012897E6*f[9];
            //      c[12] = s2-0.1379498900594787E6*f[10]+0.123195720614599E6*f[11]
            //-0.1027845300160849E6*f[12]-0.5310358975489527E4*f[18]+0.8088470649402241E5*f
            //[13]-0.6056503914974078E5*f[14];
            //      s2 = 0.4208802486726694E5*f[15]-0.3156753733280533E5*f[16]+
            //0.6550275898820406E4*f[0]-0.1943531932268136E5*f[1];
            //      s1 = s2+0.315680183945372E5*f[2]+0.1943476113623417E5*f[17]
            //-0.420881718476842E5*f[3]+0.4965001565136248E5*f[4]-0.524983890929379E5*f[5];
            //      s2 = s1+0.4894613233991193E5*f[6]-0.3817718920274625E5*f[7]+
            //0.2099152629886914E5*f[8]+0.162477895225518E1*f[9];
            //      c[13] = s2-0.2099459534059148E5*f[10]+0.3817975978123927E5*f[11]
            //-0.4894799921235417E5*f[12]-0.6550012822641871E4*f[18]+0.524994889769024E5*f
            //[13]-0.4965041394965364E5*f[14];
            //      s2 = -0.5027327505563486E5*f[15]+0.3447015306430542E5*f[16]+
            //0.6572874094194648E4*f[0]-0.2004926193054815E5*f[1];
            //      s1 = s2+0.344722161824628E5*f[2]-0.2004778863435591E5*f[17]
            //-0.5027571372697335E5*f[3]+0.6748619207811114E5*f[4]-0.8547487803782305E5*f[5];
            //      s2 = s1+0.1028425259884348E6*f[6]-0.1175818797657707E6*f[7]+
            //0.1275445995775538E6*f[8]-0.1310731204438277E6*f[9];
            //      c[14] = s2+0.127543715997086E6*f[10]-0.1175802266382156E6*f[11]+
            //0.1028403053448799E6*f[12]+0.6572313481660349E4*f[18]-0.8547233827725178E5*f
            //[13]+0.674835867017123E5*f[14];
            //      s2 = -0.2558047121477715E5*f[15]+0.1985156554051553E5*f[16]
            //-0.4265738926788039E4*f[0]+0.1251042499231089E5*f[1];
            //      s1 = s2-0.1985181294881219E5*f[2]-0.1251010091934369E5*f[17]+
            //0.2558048768475964E5*f[3]-0.2893467050157725E5*f[4]+0.2924222378493654E5*f[5];
            //      s2 = s1-0.2612365390522502E5*f[6]+0.1967921997548035E5*f[7]
            //-0.1057830735087672E5*f[8]-0.8919558556697139*f[9];
            //      c[15] = s2+0.1058000866588218E5*f[10]-0.1968068767303211E5*f[11]+
            //0.2612477613289609E5*f[12]+0.426558011015178E4*f[18]-0.2924294401255111E5*f[13]
            //+0.2893499252190595E5*f[14];
            //      s2 = 0.3055541837639058E5*f[15]-0.2167697160281305E5*f[16]
            //-0.4280439612068498E4*f[0]+0.1290557170105022E5*f[1];
            //      s1 = s2-0.216780753029054E5*f[2]+0.1290475029208018E5*f[17]+
            //0.3055666417250248E5*f[3]-0.3932904224510322E5*f[4]+0.4761048871696454E5*f[5];
            //      s2 = s1-0.5488940877564266E5*f[6]+0.6061015698499184E5*f[7]
            //-0.642742731219905E5*f[8]+0.6553661926048064E5*f[9];
            //      c[16] = s2-0.642738990471478E5*f[10]+0.6060944272146467E5*f[11]
            //-0.5488841807317342E5*f[12]-0.4280118966497665E4*f[18]+0.4760930823957595E5*f
            //[13]-0.3932777371815888E5*f[14];
            //      s2 = 0.6317501255577558E4*f[15]-0.5075373049343295E4*f[16]+
            //0.1135465138169246E4*f[0]-0.3283348147828102E4*f[1];
            //      s1 = s2+0.5075423624336011E4*f[2]+0.328327154992491E4*f[17]
            //-0.6317489106412714E4*f[3]+0.6874945079738894E4*f[4]-0.6687381121598183E4*f[5];
            //      s2 = s1+0.5775122390171245E4*f[6]-0.423702703381469E4*f[7]+
            //0.2239773207305387E4*f[8]+0.2033724224461811*f[9];
            //      c[17] = s2-0.2240163960360109E4*f[10]+0.423737171404754E4*f[11]
            //-0.5775396442915008E4*f[12]-0.1135425987774151E4*f[18]+0.6687568627770706E4*f
            //[13]-0.6875041109417692E4*f[14];
            //      s2 = -0.7546156124133059E4*f[15]+0.5542080106124855E4*f[16]+
            //0.1139374981065254E4*f[0]-0.3387045071472301E4*f[1];
            //      s1 = s2+0.5542323353775049E4*f[2]-0.3386856060408206E4*f[17]
            //-0.7546418186316882E4*f[3]+0.9344661961274131E4*f[4]-0.1088800234855406E5*f[5];
            //      s2 = s1+0.1213434036663505E5*f[6]-0.1304967878103956E5*f[7]+
            //0.1360904950547397E5*f[8]-0.1379719470979866E5*f[9];
            //      c[18] = s2+0.1360898305869176E5*f[10]-0.1304954973236161E5*f[11]+
            //0.1213415641995926E5*f[12]+0.1139299210251629E4*f[18]-0.1088777512462566E5*f
            //[13]+0.9344407175459043E4*f[14];

        }

        void generate9OrderCoefficientsForChebyshevPoints(const double* f, double* c)
        {
            double s1 = 0.1583844403245363E-1*f[9]+0.6313751514675043*f[5]
            -0.5095254494944288E-1*f[8]-0.5095254494944288E-1*f[1]-0.1962610505505151*f[6];
            c[0] = s1+0.1583844403245363E-1*f[0]+0.1*f[7]+0.1*f[2]-0.1962610505505151
                *f[3]+0.6313751514675043*f[4];
            s1 = 0.1603587222960441E-1*f[9]-0.4323021091038459*f[6]+
                0.1414213562373095*f[7]-0.5718537807100388E-1*f[8]+0.4323021091038459*f[3];
            c[1] = s1-0.4036036120973285E1*f[4]+0.4036036120973285E1*f[5]
            -0.1603587222960441E-1*f[0]+0.5718537807100388E-1*f[1]-0.1414213562373095*f[2];
            s1 = -0.7756864402286147*f[9]+0.8860825312745143E1*f[6]-0.48E1*f[7]+
                0.2483446597254016E1*f[8]+0.8860825312745143E1*f[3];
            c[2] = s1-0.5768585469770544E1*f[4]-0.5768585469770544E1*f[5]
            -0.7756864402286147*f[0]+0.2483446597254016E1*f[1]-0.48E1*f[2];
            s1 = -0.7853554692781126*f[9]+0.1951764479174911E2*f[6]
            -0.6788225099390856E1*f[7]+0.2787237275861955E1*f[8]-0.1951764479174911E2*f[3];
            c[3] = s1+0.3687541276973085E2*f[4]-0.3687541276973085E2*f[5]+
                0.7853554692781126*f[0]-0.2787237275861955E1*f[1]+0.6788225099390856E1*f[2];
            s1 = 0.5540232588990491E1*f[9]-0.3551311356743171E2*f[6]+0.304E2*f[7]
            -0.1725282845456476E2*f[8]-0.3551311356743171E2*f[3];
            c[4] = s1+0.1682570943300598E2*f[4]+0.1682570943300598E2*f[5]+
                0.5540232588990491E1*f[0]-0.1725282845456476E2*f[1]+0.304E2*f[2];
            s1 = 0.5609292285107051E1*f[9]-0.782243540069792E2*f[6]+
                0.4299209229614209E2*f[7]-0.1936330204796271E2*f[8]+0.782243540069792E2*f[3];
            c[5] = s1-0.1075575604690363E3*f[4]+0.1075575604690363E3*f[5]
            -0.5609292285107051E1*f[0]+0.1936330204796271E2*f[1]-0.4299209229614209E2*f[2];
            s1 = -0.1205984449732548E2*f[9]+0.4750843181628629E2*f[6]-0.512E2*f[7]+
                0.3533490840770833E2*f[8]+0.4750843181628629E2*f[3];
            c[6] = s1-0.1958349572666914E2*f[4]-0.1958349572666914E2*f[5]
            -0.1205984449732548E2*f[0]+0.3533490840770833E2*f[1]-0.512E2*f[2];
            s1 = -0.122101719759684E2*f[9]+0.1046463127390149E3*f[6]
            -0.7240773439350247E2*f[7]+0.3965729481037803E2*f[8]-0.1046463127390149E3*f[3];
            c[7] = s1+0.125186580346171E3*f[4]-0.125186580346171E3*f[5]+
                0.122101719759684E2*f[0]-0.3965729481037803E2*f[1]+0.7240773439350247E2*f[2];
            s1 = 0.7910835055998654E1*f[9]+0.7910835055998654E1*f[5]
            -0.2071083505599865E2*f[8]-0.2071083505599865E2*f[1]-0.2071083505599865E2*f[6];
            c[8] = s1+0.7910835055998654E1*f[0]+0.256E2*f[7]+0.256E2*f[2]
            -0.2071083505599865E2*f[3]+0.7910835055998654E1*f[4];
            s1 = 0.800944461005982E1*f[9]-0.4561953403844443E2*f[6]+
                0.3620386719675123E2*f[7]-0.232443135866648E2*f[8]+0.4561953403844443E2*f[3];
            c[9] = s1-0.5056964303847105E2*f[4]+0.5056964303847105E2*f[5]
            -0.800944461005982E1*f[0]+0.232443135866648E2*f[1]-0.3620386719675123E2*f[2];


            //      double s1 = 0.1000002331488168*f[2]+0.6313796788471905*f[5]
            //-0.5095272514229859E-1*f[1]+0.158385086859074E-1*f[0]+0.999992844792327E-1*f[7]
            //;
            //      c[0] = s1-0.1962610525522868*f[3]-0.1962607240432899*f[6]
            //-0.5095184555527113E-1*f[8]+0.1583813136996361E-1*f[9]+0.6313705107620354*f[4];
            //      s1 = 0.4036054485576258E1*f[4]-0.4323257143547481*f[3]+0.1414340189016573
            //*f[2]-0.5719190046685418E-1*f[1]+0.1603790556098987E-1*f[0];
            //      c[1] = s1-0.1414081991497306*f[7]+0.5717832719358786E-1*f[8]
            //-0.4036023793888829E1*f[5]+0.4322784645379086*f[6]-0.1603359391023938E-1*f[9];
            //      s1 = -0.4800001910261128E1*f[2]-0.5768703581251964E1*f[5]+
            //0.248345239005288E1*f[1]-0.7756888860526967*f[0]-0.4799990460655252E1*f[7];
            //      c[2] = s1+0.8860790909087617E1*f[3]+0.8860873601184184E1*f[6]+
            //0.2483423557502152E1*f[8]-0.7756743787983749*f[9]-0.5768481240807418E1*f[4];
            //      s1 = -0.3687558687855159E2*f[4]+0.195178810877599E2*f[3]
            //-0.6788400436019682E1*f[2]+0.2787333468621219E1*f[1]-0.7853859851013885*f[0];
            //      c[3] = s1+0.6788047981887552E1*f[7]-0.2787124365913897E1*f[8]+
            //0.3687538918675178E2*f[5]-0.1951746957515636E2*f[6]+0.7853155157224695*f[9];
            //      s1 = 0.168252574932793E2*f[4]-0.3551290231268285E2*f[3]+
            //0.3039996888984091E2*f[2]-0.1725285293568345E2*f[1]+0.5540246137520449E1*f[0];
            //      c[4] = s1+0.3040006239213025E2*f[7]-0.1725273155187218E2*f[8]+
            //0.1682623910906728E2*f[5]-0.3551345344591239E2*f[6]+0.5540166224312688E1*f[9];
            //      s1 = 0.1075581118655182E3*f[4]-0.7822506760227538E2*f[3]+
            //0.4299269312301074E2*f[2]-0.1936366868302633E2*f[1]+0.5609412532054644E1*f[0];
            //      c[5] = s1-0.4299159275722636E2*f[7]+0.193628724645344E2*f[8]
            //-0.1075576862082074E3*f[5]+0.7822404595356443E2*f[6]-0.560912068794702E1*f[9];
            //      s1 = -0.1958282491285708E2*f[4]+0.4750806777004703E2*f[3]
            //-0.5119990598933702E2*f[2]+0.3533493458662398E2*f[1]-0.1205986722501137E2*f[0];
            //      c[6] = s1-0.5120023828957131E2*f[7]+0.3533481367931156E2*f[8]
            //-0.1958429475300682E2*f[5]+0.4750905285836933E2*f[6]-0.120597377245683E2*f[9];
            //      s1 = -0.1251872811697842E3*f[4]+0.1046471643047002E3*f[3]
            //-0.7240849307258414E2*f[2]+0.396577949326495E2*f[1]-0.1221034355897671E2*f[0];
            //      c[7] = s1+0.7240727583597336E2*f[7]-0.3965675529516992E2*f[8]+
            //0.1251869088652769E3*f[5]-0.1046461907644867E3*f[6]+0.1220991992240168E2*f[9];
            //      s1 = 0.7910513877213481E1*f[4]-0.2071064582107683E2*f[3]+
            //0.2559993735650712E2*f[2]-0.2071084152735991E2*f[1]+0.7910846338709314E1*f[0];
            //      c[8] = s1+0.256001727582975E2*f[7]-0.2071082228456626E2*f[8]+
            //0.7911221485475838E1*f[5]-0.2071116927663829E2*f[6]+0.7910787093438026E1*f[9];
            //      s1 = 0.5056995042862676E2*f[4]-0.4561988633121349E2*f[3]+
            //0.3620418884342202E2*f[2]-0.2324453739990235E2*f[1]+0.8009524644519129E1*f[0];
            //     c[9] = s1-0.3620374931594045E2*f[7]+0.232441047061687E2*f[8]
            //       -0.5056983749091802E2*f[5]+0.456195723850563E2*f[6]-0.8009330469818595E1*f[9];
        }

        void generate3OrderCoefficientsForChebyshevPoints(const double* f, double* c)
        {
            c[0] = 0.6035533905932738*f[2]+0.6035533905932738*f[1]-0.1035533905932738*f[3]-0.1035533905932738*f[0];
            c[1] = 0.1577161014949475E1*f[2]-0.1577161014949475E1*f[1]
            -0.1120853822919913*f[3]+0.1120853822919913*f[0];
            c[2] = -0.7071067811865475*f[2]-0.7071067811865475*f[1]+
                0.7071067811865475*f[3]+0.7071067811865475*f[0];
            c[3] = -0.1847759065022574E1*f[2]+0.1847759065022574E1*f[1]+
                0.7653668647301795*f[3]-0.7653668647301795*f[0];

            //      c[0] = 0.6035518292488549*f[1]+0.6035547576315272*f[2]-0.1035531560466057
            //*f[3]-0.1035534308337765*f[0];
            //      c[1] = 0.1577163967913825E1*f[1]-0.1577160080202035E1*f[2]+
            //0.1120833794805169*f[3]-0.112087267192307*f[0];
            //      c[2] = -0.7071036584925796*f[1]-0.7071108420663*f[2]+0.7071081884694652*f
            //[3]+0.7071063120894144*f[0];
            //      c[3] = -0.1847763206615791E1*f[1]+0.1847760334391291E1*f[2]
            //-0.7653662518371072*f[3]+0.7653691240616076*f[0];
        }

        void generate6OrderCoefficientsForChebyshevPoints(const double* f, double* c)
        {
            c[0] = f[3];
            c[1] = -0.3367262773395495E-98*f[3]+0.797473388882404*f[1]
            -0.2076521396572337E1*f[2]+0.2282434743901499*f[6]-0.2282434743901499*f[0]
            -0.797473388882404*f[5]+0.2076521396572337E1*f[4];
            c[2] = 0.4785893568621884E1*f[4]-0.1020006749235778E1*f[5]+
                0.2341131806138941*f[6]-0.1020006749235778E1*f[1]+0.4785893568621884E1*f[2]
            -0.8E1*f[3]+0.2341131806138941*f[0];
            c[3] = 0.1452463894223022E-97*f[3]-0.5075149510618926E1*f[1]+
                0.5581811799453683E1*f[2]-0.1585813957851155E1*f[6]+0.1585813957851155E1*f[0]+
                0.5075149510618926E1*f[5]-0.5581811799453683E1*f[4];
            c[4] = -0.1286476375170475E2*f[4]+0.6491359870285673E1*f[5]
            -0.1626596118580921E1*f[6]+0.6491359870285673E1*f[1]-0.1286476375170475E2*f[2]+
                0.16E2*f[3]-0.1626596118580921E1*f[0];
            c[5] = -0.1142430778028615E-97*f[3]+0.4456813312831194E1*f[1]
            -0.3574086776996708E1*f[2]+0.1983468521680266E1*f[6]-0.1983468521680266E1*f[0]
            -0.4456813312831194E1*f[5]+0.3574086776996708E1*f[4];
            c[6] = 0.8237429649393546E1*f[4]-0.5700478188422707E1*f[5]+
                0.2034477110457732E1*f[6]-0.5700478188422707E1*f[1]+0.8237429649393546E1*f[2]
            -0.9142857142857143E1*f[3]+0.2034477110457732E1*f[0];

            // The following is the original code with the chebyshev points
            // in the reversed order.
            //  c[0] = -0.3028332236693449E-6*f[0]+0.2755120846852898E-5*f[4]+0.9999999999928176*f[3]-0.275511714263501E-5*f[2]+0.3028295195041057E-6*f[6]
            //      -0.1058078797117903E-5*f[5]+0.1058085979505076E-5*f[1];
            //  c[1] = -0.797473811944485*f[1]+0.1602774974723967E-4*f[3]+
            //      0.2282438772594788*f[0]-0.228241706683623*f[6]+0.7974711052860149*f[5]
            //      -0.2076529898379744E1*f[4]+0.2076514406712611E1*f[2];
            //  c[2] = 0.2341196646254094*f[0]+0.4785874793473568E1*f[4]
            //      -0.800001088729707E1*f[3]+0.4785923363255094E1*f[2]+0.2341054182777421*f[6]
            //      -0.1019984278087148E1*f[5]-0.1020028074247595E1*f[1];
            //  c[3] = 0.5075145720229115E1*f[1]-0.5567971446742538E-4*f[3]
            //      -0.1585815510401134E1*f[0]+0.1585807643136568E1*f[6]-0.5075155670068457E1*f[5]+
            //      0.5581855822054074E1*f[4]-0.5581782325235697E1*f[2];
            //  c[4] = -0.1626615194602737E1*f[0]-0.1286475108249098E2*f[4]+
            //      0.1600003886460378E2*f[3]-0.1286483020571452E2*f[2]-0.1626573002575859E1*f[6]+
            //      0.649131720957498E1*f[5]+0.6491413411205342E1*f[1];
            //  c[5] = -0.4456808012801303E1*f[1]+0.4238434292796022E-4*f[3]+
            //      0.1983469313821235E1*f[0]-0.1983466911253889E1*f[6]+0.4456826875702437E1*f[5]
            //      -0.3574126080464835E1*f[4]+0.3574062430653428E1*f[2];
            //  c[6] = 0.2034490277705017E1*f[0]+0.8237436212638977E1*f[4]
            //      -0.9142887339410554E1*f[3]+0.8237470527857312E1*f[2]+0.2034464160219973E1*f[6]
            //      -0.5700461540117709E1*f[5]-0.5700512298893015E1*f[1];
        }

        bool generateInterpolatingPolynomial(const double* x,
            const double* y,
            int n, double* coeffs)
        {
            // Generates the coefficients of the interpolating polynomial.
            // Several orders have been pre-generated by Maple.  If the order
            // is not one of the pregenerated then we'll just calculate it
            // manually.
            //
            // This funciton assumes that the sample points are the chebyshev
            // points on [-1,1].  If this is not the case then this function
            // will return incorrect values.
            if( n == 6 )
            {
                generate6OrderCoefficientsForChebyshevPoints(y, coeffs);
                return true;
            }
            if( n == 9 )
            {
                generate9OrderCoefficientsForChebyshevPoints(y, coeffs);
                return true;
            }

            if( n == 18 )
            {
                generate18OrderCoefficientsForChebyshevPoints(y, coeffs);
                return true;
            }

            if( n == 24 )
            {
                generate24OrderCoefficientsForChebyshevPoints(y, coeffs);
                return true;
            }

            if( n == 30 )
            {
                generate30OrderCoefficientsForChebyshevPoints(y, coeffs);
                return true;
            }

            int i;

            int* comb = new int[n+1];

            for(i = 0; i <= n; i++)
            {
                coeffs[i] = 0.0;
            }

            // Calculate the denominators of each expression (since they
            // are static).
            double* denom = new double[n+1];
            for(i = 0; i <= n; i++)
            {
                double termVal = 1.0;
                for(int j = 0; j <= n; j++)
                {
                    if( j != i )
                    {
                        termVal *= (x[i]-x[j]);
                    }
                }
                denom[i] = 1.0/termVal;
            }

            // Take care of x^n
            for(i = 0; i <= n; i++)
            {
                coeffs[n] += y[i]*denom[i];
            }


            // Take care of the constant.
            for(i = 0; i <= n; i++)
            {
                double num = 1.0;
                for(int j = 0; j <= n; j++)
                {
                    if( j != i )
                    {
                        num *= (-x[j]);
                    }
                }

                coeffs[0] += num*y[i]*denom[i];
            }

            for(i = n-1; i >= 1; i--)
            {
                // For the ith term, we need all combinations of n-i
                // coefficients for each term.
                for(int j = 0; j <= n; j++)
                {
                    comb[0] = -1;
                    while(enumerateCombinations(n+1, n-i, comb) )
                    {
                        bool hasInvalid = false;
                        for(int k = 0; k < n-i; k++)
                        {
                            if( comb[k] == j )
                            {
                                hasInvalid = true;
                            }
                        }

                        if( !hasInvalid )
                        {
                            double term = 1.0;
                            for(int k = 0; k < n-i; k++)
                            {
                                term *= (-x[comb[k]]);
                            }
                            coeffs[i] += (term * y[j]*denom[j]);
                        }
                    }
                }
            }

            delete [] denom;
            delete [] comb;
            return true;
        }

        int findRealRoots(const std::vector<double>& coefficients,
            int n, std::vector<double>& roots)
        {
            const size_t MAX_ARRAY_SIZE = 40;
            assert(coefficients.size() < MAX_ARRAY_SIZE);

            unsigned int actualPolynomialDegree = n;
            //double epsilon = 1e-10;
            double epsilon = 0;
            while( fabs(coefficients[actualPolynomialDegree])  <= epsilon
                && actualPolynomialDegree > 0 )
            {
                actualPolynomialDegree--;
            }

            if( actualPolynomialDegree == 0 )
            {
                //cerr << "Error: Tring to find the roots of an invalid polynomial." << endl;
                return 0;
            }

            int numRealRoots = 0;

            if( actualPolynomialDegree > 2 )
            {
                double reducedCoefficients[MAX_ARRAY_SIZE];
                for(int i = actualPolynomialDegree-1; i >= 0; i--)
                {
                    reducedCoefficients[i] = -coefficients[i]/coefficients[actualPolynomialDegree];
                }

                // Now we set up the upper hessenburg matrix for root finding.
                double array[MAX_ARRAY_SIZE*MAX_ARRAY_SIZE+1];
                double* h[MAX_ARRAY_SIZE];
                for(size_t l = 0; l < MAX_ARRAY_SIZE; l++)
                {
                    h[l] = &array[l*MAX_ARRAY_SIZE];
                }

                generateRowMajorHessenbergMatrix(reducedCoefficients, actualPolynomialDegree, h);

                double wr[MAX_ARRAY_SIZE];
                double wi[MAX_ARRAY_SIZE];
                for(size_t i = 0; i < MAX_ARRAY_SIZE; i++)
                {
                    wr[i] = 0.0;
                    wi[i] = 0.0;
                }

                balanc(h, actualPolynomialDegree);
                hqr(h, actualPolynomialDegree, wr, wi);

                for(unsigned int i = 0; i < actualPolynomialDegree; i++)
                {
                    // Check for real roots inside the element.
                    if( wi[i] == 0)
                    {
                        roots.push_back(wr[i]);
                        //roots[numRealRoots] = wr[i];
                        numRealRoots++;
                    }
                }
            }
            else if( actualPolynomialDegree == 2 )
            {
                // Solve with the quadratic formula.
                double a = coefficients[2];
                double b = coefficients[1];
                double c = coefficients[0];

                double q;
                double sq1 = b*b-4*a*c;
                if( sq1 < 0 )
                {
                    numRealRoots = 0;
                }
                else
                {

                    double sq = sqrt(sq1);
                    if( b < 0 )
                    {
                        q = .5*(-b+sq);
                    }
                    else
                    {
                        q = -.5*(b+sq);
                    }

                    roots.push_back(q/a);
                    roots.push_back(c/q);
                    //roots[0] = q/a;
                    //roots[1] = c/q;
                    numRealRoots = 2;
                }

            }
            else if( actualPolynomialDegree == 1 )
            {
                numRealRoots = 1;
                if( coefficients[0] == 0 )
                {
                    roots.push_back(0.0);
                    //roots[0] = 0;
                }
                else
                {
                    roots.push_back(-coefficients[0]/coefficients[1]);
                    //roots[0] = -coefficients[0]/coefficients[1];
                }
            }

            return numRealRoots;
        }
        //
        //int findRealRoots(const double* coefficients,
        //                 int n, double* roots)
        //{
        //  int actualPolynomialDegree = n;
        //  //double epsilon = 1e-10;
        //  double epsilon = 0;
        //  while( fabs(coefficients[actualPolynomialDegree])  <= epsilon
        //      && actualPolynomialDegree > 0 )
        //  {
        //      actualPolynomialDegree--;
        //  }
        //
        //  if( actualPolynomialDegree == 0 )
        //  {
        //      cerr << "Error: Tring to find the roots of an invalid polynomial." << endl;
        //      return 0;
        //  }
        //
        //  int numRealRoots = 0;
        //
        //  if( actualPolynomialDegree > 2 )
        //  {
        //      int i;
        //      double reducedCoefficients[POLYHEDRON_MAX_ARRAY_SIZE];
        //      for(i = actualPolynomialDegree-1; i >= 0; i--)
        //      {
        //          reducedCoefficients[i] = -coefficients[i]/coefficients[actualPolynomialDegree];
        //      }
        //
        //      // Now we set up the upper hessenburg matrix for root finding.
        //      double array[POLYHEDRON_MAX_ARRAY_SIZE*POLYHEDRON_MAX_ARRAY_SIZE+1];
        //      double* h[POLYHEDRON_MAX_ARRAY_SIZE];
        //      for(int l = 0; l < POLYHEDRON_MAX_ARRAY_SIZE; l++)
        //      {
        //          h[l] = &array[l*POLYHEDRON_MAX_ARRAY_SIZE];
        //      }
        //
        //      /*
        //      double* h1[POLYHEDRON_MAX_ARRAY_SIZE];
        //      for(l = 0; l < POLYHEDRON_MAX_ARRAY_SIZE; l++)
        //      {
        //          h1[l] = &array[l*POLYHEDRON_MAX_ARRAY_SIZE];
        //      }
        //      */
        //
        //      generateRowMajorHessenbergMatrix(reducedCoefficients, actualPolynomialDegree, h);
        //      //generateRowMajorHessenbergMatrix(reducedCoefficients, actualPolynomialDegree, h1);
        //
        //
        //      //int ldh = actualPolynomialDegree;
        //      double wr[POLYHEDRON_MAX_ARRAY_SIZE];
        //      double wi[POLYHEDRON_MAX_ARRAY_SIZE];
        //      for(i = 0; i < POLYHEDRON_MAX_ARRAY_SIZE; i++)
        //      {
        //          wr[i] = 0.0;
        //          wi[i] = 0.0;
        //      }
        //
        //      /*
        //      double wr1[POLYHEDRON_MAX_ARRAY_SIZE];
        //      double wi1[POLYHEDRON_MAX_ARRAY_SIZE];
        //      for(i = 0; i < POLYHEDRON_MAX_ARRAY_SIZE; i++)
        //      {
        //          wr1[i] = 0.0;
        //          wi1[i] = 0.0;
        //      }
        //      */
        //      //double* z = NULL;
        //      //int ldz = 1;
        //
        //      // Numerical recipes version.
        //
        //      balanc(h, actualPolynomialDegree);
        //      //myBalance(h, actualPolynomialDegree);
        //      //myBalance(h, actualPolynomialDegree);
        //      //myBalance(h, actualPolynomialDegree);
        //      //myBalance(h, actualPolynomialDegree);
        //
        //      hqr(h, actualPolynomialDegree, wr, wi);
        //
        //      for(i = 0; i < actualPolynomialDegree; i++)
        //      {
        //          // Check for real roots inside the element.
        //          if( wi[i] == 0)
        //          {
        //              roots[numRealRoots] = wr[i];
        //              numRealRoots++;
        //          }
        //      }
        //
        //      /*
        //      //balanc(h, actualPolynomialDegree);
        //      hqr(h1, actualPolynomialDegree, wr1, wi1);
        //      double roots1[6];
        //      int numRealRoots1 = 0;
        //      for(i = 0; i < actualPolynomialDegree; i++)
        //      {
        //          // Check for real roots inside the element.
        //          if( wi1[i] == 0)
        //          {
        //              roots1[numRealRoots1] = wr1[i];
        //              numRealRoots1++;
        //          }
        //      }
        //
        //      if( numRealRoots != numRealRoots1 )
        //      {
        //          int a;
        //          a++;
        //      }
        //
        //      for(i = 0; i < numRealRoots; i++)
        //      {
        //          if( fabs(roots[i] - roots1[i]) > 1 )
        //          {
        //              int a;
        //              a++;
        //          }
        //      }
        //      */
        //  }
        //  else if( actualPolynomialDegree == 2 )
        //  {
        //      // Solve with the quadratic formula.
        //      double a = coefficients[2];
        //      double b = coefficients[1];
        //      double c = coefficients[0];
        //
        //      double q;
        //      double sq1 = b*b-4*a*c;
        //      if( sq1 < 0 )
        //      {
        //          numRealRoots = 0;
        //      }
        //      else
        //      {
        //
        //          double sq = sqrt(sq1);
        //          if( b < 0 )
        //          {
        //              q = .5*(-b+sq);
        //          }
        //          else
        //          {
        //              q = -.5*(b+sq);
        //          }
        //
        //          roots[0] = q/a;
        //          roots[1] = c/q;
        //          numRealRoots = 2;
        //      }
        //
        //  }
        //  else if( actualPolynomialDegree == 1 )
        //  {
        //      numRealRoots = 1;
        //      if( coefficients[0] == 0 )
        //      {
        //          roots[0] = 0;
        //      }
        //      else
        //      {
        //          roots[0] = -coefficients[0]/coefficients[1];
        //      }
        //  }
        //
        //  return numRealRoots;
        //}

        namespace Jacobi
        {
            double phi_0(double t)
            {
                return 1.0;
            }

            double phi_0_prime(double t)
            {
                return 0.0;
            }

            double phi_1(double t)
            {
                return t;
            }

            double phi_1_prime(double t)
            {
                return 1.0;
            }

            double phi_2(double t)
            {
                return 1.5*t*t - .5;
            }

            double phi_2_prime(double t)
            {
                return 3.0*t;
            }

            double phi_3(double t)
            {
                return 5.0/2.0*t*t*t-3.0/2.0*t;
            }

            double phi_3_prime(double t)
            {
                return 15.0/2.0*t*t-3.0/2.0;
            }

            double phi_4(double t)
            {
                return 35.0/8.0*t*t*t*t-15.0/4.0*t*t+3.0/8.0;
            }

            double phi_4_prime(double t)
            {
                return 35.0/2.0*t*t*t-15.0/2.0*t;
            }

            double phi_5(double t)
            {
                return 63.0/8.0*t*t*t*t*t-35.0/4.0*t*t*t+15.0/8.0*t;
            }

            double phi_5_prime(double t)
            {
                return 315.0/8.0*t*t*t*t-105.0/4.0*t*t+15.0/8.0;
            }

            double phi_6(double t)
            {
                return 231.0/16.0*t*t*t*t*t*t-315.0/16.0*t*t*t*t+105.0/16.0*t*t-5.0/16.0;
            }


            double phi_6_prime(double t)
            {
                return 693.0/8.0*t*t*t*t*t-315.0/4.0*t*t*t+105.0/8.0*t;
            }

            //JacobiFuncPtr JacobiFuncs[] = {&phi_0, &phi_1, &phi_2, &phi_3, &phi_4, &phi_5, &phi_6};

            /*
            double P(int n, int a, int b, double x)
            {
            // From spectral methods page 351.
            if( n == 0 )
            return 1.0;

            if( n == 1 )
            return .5*(a-b+(a+b+2.0)*x);

            double two_n_plus_a_b = 2*(n-1) + a + b;
            double a1 = 2*(n)*(n+a+b)*two_n_plus_a_b;
            double a2 = (two_n_plus_a_b+1)*(a*a-b*b);
            double a3 = two_n_plus_a_b*(two_n_plus_a_b+1)*(two_n_plus_a_b+2);
            double a4 = 2*(n+a-1)*(n+b-1)*(two_n_plus_a_b+2);

            return ((a2 + a3*x)*P(n-1, a, b, x) - a4*P(n-2, a, b, x)) / a1;
            }

            double dP(int n, int a, int b, double x)
            {
            if( n != 0 )
            {
            // TODO - I'm really calculating P twice.  Maybe
            // make this faster.

            //double bn1 = (2*n + a + b)*(1-x*x);
            //double bn2 = n*(a-b-(2*n+a+b)*x);
            //double bn3 = 2*(n+a)*(n+b);

            //return (bn2*P(n, a, b, x) + bn3*P(n-1, a, b, x))/bn1;

            return .5*(n+a+b+1)*P(n-1, a+1, b+1, x);
            }
            return 0;
            }
            */
        }

        int RADIX = 2;

        //int getShift(double columnNorm, double rowNorm)
        //{
        //  int shift = (getExponent(columnNorm)-getExponent(rowNorm))/2;
        //
        //  double norm = shiftExponent(columnNorm, -shift) +
        //      shiftExponent(rowNorm, shift);
        //  double upperNorm = shiftExponent(columnNorm, -shift-1) +
        //      shiftExponent(rowNorm, shift+1);
        //  double lowerNorm = shiftExponent(columnNorm, -shift+1) +
        //      shiftExponent(rowNorm, shift-1);
        //
        //  if( norm <= upperNorm && norm <= lowerNorm )
        //  {
        //      return shift;
        //  }
        //  else if( upperNorm <= norm && upperNorm <= lowerNorm )
        //  {
        //      return shift+1;
        //  }
        //  else
        //  {
        //      return shift-1;
        //  }
        //}

        // This procedure works by trying to make the exponents
        // of the row and column norms the same.
        //void myBalance(double** a, int n)
        //{
        //  // Nothing to balance in this case.
        //  if( n < 2 ) return;
        //
        //  // Balance the nth column and the nth row.
        //  int i;
        //  double lastColumnNorm = 0.0;
        //
        //  for(i = 1; i < n; i++)
        //  {
        //      lastColumnNorm += fabs(a[i][n]);
        //  }
        //
        //  double lastRowNorm = 1.0;
        //  int lastShift = getShift(lastColumnNorm, lastRowNorm);
        //
        //  a[n][n-1] = shiftExponent(a[n][n-1], lastShift);
        //  for(i = 1; i < n; i++)
        //  {
        //      a[i][n] = shiftExponent(a[i][n], -lastShift);
        //  }
        //
        //  // Now balance each row column pair.
        //  for(i = n-1; i > 1; i--)
        //  {
        //      double rowNorm = 1 + fabs(a[i][n]);
        //      double columnNorm = fabs(a[i+1][i]);
        //
        //      int shift = getShift(columnNorm, rowNorm);
        //      a[i][i-1] = shiftExponent(a[i][i-1], shift);
        //      a[i][n] = shiftExponent(a[i][n], shift);
        //      a[i+1][i] = shiftExponent(a[i+1][i], -shift);
        //  }
        //
        //  // First row and column.
        //  double firstColumnNorm = fabs(a[2][1]);
        //  double firstRowNorm = fabs(a[1][n]);
        //
        //  int firstShift = getShift(firstColumnNorm, firstRowNorm);
        //
        //  a[2][1] = shiftExponent(a[2][1], -firstShift);
        //  a[1][n] = shiftExponent(a[1][n], firstShift);
        //}

        void balanc(double** a, int n)
        {
            int last, j, i;
            double s,r,g,f,c,sqrdx;

            sqrdx = (double)RADIX*RADIX;
            last = 0;

            while( last == 0 )
            {
                last = 1;
                for(i = 1; i <= n; i++)
                {
                    r = 0.0;
                    c = 0.0;
                    for(j = 1; j <= n; j++)
                    {
                        if( j != i )
                        {
                            c += fabs(a[j][i]);
                            r += fabs(a[i][j]);
                        }
                    }

                    if( c && r )
                    {
                        g = r/RADIX;
                        f = 1.0;
                        s = c+r;
                        while( c < g )
                        {
                            f *= RADIX;
                            c *= sqrdx;
                        }

                        g = r*RADIX;
                        while( c > g )
                        {
                            f /= RADIX;
                            c /= sqrdx;
                        }

                        if( (c+r)/f < .95*s )
                        {
                            last = 0;
                            g = 1.0/f;
                            for(j = 1; j <= n; j++)
                            {
                                a[i][j] *= g;
                            }
                            for(j = 1; j <=n; j++)
                            {
                                a[j][i] *= f;
                            }
                        }
                    }
                }
            }
        }

        void hqr(double **a, int n, double* wr, double* wi)
        {
            //cout << "Into hqr." << endl;
            //printMatrix(a, n);

            int nn,m,l,k,j,its,i,mmin;
            double z,y,x,w,v,u,t,s,anorm;
            double r = 0.0;
            double p = 0.0;
            double q = 0.0;
            //int totalIts = 0;
            anorm=0.0; //Compute matrix norm for possible use in locating
            //single small subdiagonal element.
            for (i=1;i<=n;i++)
            {
                for (j=std::max(i-1,1);j<=n;j++)
                {
                    anorm += fabs(a[i][j]);
                }
            }

            nn=n;
            t=0.0; //Gets changed only by an exceptional shift.
            while (nn >= 1) //Begin search for next eigenvalue.
            {
                its=0;
                do
                {
                    for (l=nn;l>=2;l--)
                    {
                        //Begin iteration: look for single small subdiagonal
                        //element.
                        s=fabs(a[l-1][l-1])+fabs(a[l][l]);
                        if (s == 0.0) s=anorm;
                        if ((double)(fabs(a[l][l-1]) + s) == s)
                        {
                            a[l][l-1]=0.0;
                            break;
                        }
                    }
                    x=a[nn][nn];
                    if (l == nn)
                    {
                        //One root found.
                        //wr[nn]=x+t;
                        wr[nn-1]=x+t;
                        //wi[nn--]=0.0;
                        wi[nn-1] = 0.0;
                        nn--;
                    }
                    else
                    {
                        y=a[nn-1][nn-1];
                        w=a[nn][nn-1]*a[nn-1][nn];
                        if (l == (nn-1))
                        { //Two roots found...

                            p=0.5*(y-x);
                            q=p*p+w;
                            z=sqrt(fabs(q));
                            x += t;
                            if (q >= 0.0)
                            { //...a real pair.
                                z=p+SIGN(z,p);
                                //wr[nn-1]=wr[nn]=x+z;
                                wr[nn-2]=wr[nn-1]=x+z;
                                //if (z) wr[nn]=x-w/z;
                                if (z) wr[nn-1]=x-w/z;
                                //wi[nn-1]=wi[nn]=0.0;
                                wi[nn-2]=wi[nn-1]=0.0;
                            }
                            else
                            { //...a complex pair.
                                //wr[nn-1]=wr[nn]=x+p;
                                wr[nn-2]=wr[nn-1]=x+p;
                                //wi[nn-1]= -(wi[nn]=z);
                                wi[nn-2]= -(wi[nn-1]=z);
                            }

                            nn -= 2;
                        }
                        else
                        { //No roots found. Continue iteration.
                            //cout << "Iteration " << its << endl;
                            //printMatrix(a, n);
                            //if (its == 30) cerr << "Too many iterations in hqr" << endl;
                            //if( its > 30 )
                            //{
                            //  cerr << its << endl;
                            //}
                            if (its == 10 || its == 20)
                            { //Form exceptional shift.
                                t += x;
                                for (i=1;i<=nn;i++) a[i][i] -= x;
                                s=fabs(a[nn][nn-1])+fabs(a[nn-1][nn-2]);
                                y=x=0.75*s;
                                w = -0.4375*s*s;
                            }
                            ++its;
                            //totalIts++;
                            for (m=(nn-2);m>=l;m--)
                            { //Form shift and then look for
                                //2 consecutive small subdiagonal
                                //elements.
                                z=a[m][m];
                                r=x-z;
                                s=y-z;
                                p=(r*s-w)/a[m+1][m]+a[m][m+1]; //Equation (11.6.23).
                                q=a[m+1][m+1]-z-r-s;
                                r=a[m+2][m+1];
                                s=fabs(p)+fabs(q)+fabs(r); //Scale to prevent overflow or
                                // underflow.
                                p /= s;
                                q /= s;
                                r /= s;
                                if (m == l) break;

                                u=fabs(a[m][m-1])*(fabs(q)+fabs(r));
                                v=fabs(p)*(fabs(a[m-1][m-1])+fabs(z)+fabs(a[m+1][m+1]));
                                if ((double)(u+v) == v) break; //Equation (11.6.26).
                            }
                            for (i=m+2;i<=nn;i++)
                            {
                                a[i][i-2]=0.0;
                                if (i != (m+2)) a[i][i-3]=0.0;
                            }
                            for (k=m;k<=nn-1;k++)
                            {
                                //Double QR step on rows l to nn and columns m to nn.
                                if (k != m)
                                {
                                    p=a[k][k-1]; //Begin setup of Householder vector.
                                    q=a[k+1][k-1];
                                    r=0.0;
                                    if (k != (nn-1)) r=a[k+2][k-1];
                                    if ((x=fabs(p)+fabs(q)+fabs(r)) != 0.0)
                                    {
                                        p /= x; //Scale to prevent overflow or
                                        //underflow.
                                        q /= x;
                                        r /= x;
                                    }
                                }
                                if ((s=SIGN(sqrt(p*p+q*q+r*r),p)) != 0.0)
                                {
                                    if (k == m)
                                    {
                                        if (l != m)
                                        {
                                            a[k][k-1] = -a[k][k-1];
                                        }
                                    }
                                    else
                                    {
                                        a[k][k-1] = -s*x;
                                    }
                                    p += s; //Equations (11.6.24).
                                    x=p/s;
                                    y=q/s;
                                    z=r/s;
                                    q /= p;
                                    r /= p;
                                    for (j=k;j<=nn;j++)
                                    { //Row modification.
                                        p=a[k][j]+q*a[k+1][j];
                                        if (k != (nn-1))
                                        {
                                            p += r*a[k+2][j];
                                            a[k+2][j] -= p*z;
                                        }
                                        a[k+1][j] -= p*y;
                                        a[k][j] -= p*x;
                                    }
                                    mmin = nn<k+3 ? nn : k+3;
                                    for (i=l;i<=mmin;i++)
                                    { //Column modification.
                                        p=x*a[i][k]+y*a[i][k+1];
                                        if (k != (nn-1)) {
                                            p += z*a[i][k+2];
                                            a[i][k+2] -= p*r;
                                        }
                                        a[i][k+1] -= p*q;
                                        a[i][k] -= p;
                                    }
                                }
                            }
                        }
                    }
                } while (l < nn-1);
                //cout << its << endl;
            }
        }

#ifdef _WIN32
        int getExponent(double val)
        {
            if( val == 0.0 ) return 0;
            unsigned int raw = ((unsigned int*)(&val))[1];
            static unsigned int mask = 0x7FF00000;

            unsigned int temp = mask&raw;

            return (temp >> 20) - 1023;
        }
#else
        int getExponent(double val)
        {
            if( val == 0.0 ) return 0;
            unsigned int raw = ((unsigned int*)(&val))[0];
            static unsigned int mask = 0x7FF00000;

            unsigned int temp = mask&raw;

            return (temp >> 20) - 1023;
        }
#endif

#ifdef _WIN32
        double shiftExponent(double val, int shift)
        {
            return setExponent(val, getExponent(val) + shift);
        }
#else

#endif

#ifdef _WIN32
        double setExponent(double val, int exponent)
        {
            double result = val;
            unsigned int raw = ((unsigned int*)(&val))[1];
            //static unsigned int mask = 0x7FF00000;
            static unsigned int mask = 0x800FFFFF;

            raw &= mask;

            int temp = (exponent + 1023) << 20;
            raw |= temp;

            ((unsigned int*)(&result))[1] = raw;

            return result;
        }
#else
        void setExponent(double& val, int exponent)
        {
        }

#endif

        void generateRowMajorHessenbergMatrix(const double* coefficients, int n, double** result)
        {
            int polynomialDegree = n;
            // starting with the leftmost column, fill in
            // the values.
            // Since the 0th column and 0th row are not used, start the count at 1.
            for(int column = 1; column < polynomialDegree; column++)
            {
                for(int row = 1; row <= polynomialDegree; row++)
                {
                    // Always put a 0 unless we are directly below
                    // the diagonal.
                    if( column+1 == row )
                    {
                        result[row][column] = 1.0;
                    }
                    else
                    {
                        result[row][column] = 0.0;
                    }
                }
            }

            int r;
            for(r = 1; r <= polynomialDegree; r++)
            {
                result[r][polynomialDegree] = coefficients[r-1];
            }
            /*
            // Do some balancing.
            double ek[2048];

            int k;
            for(k = polynomialDegree-1; k >= 1; k--)
            {
            int first_exponent = getExponent(coefficients[k]);
            int second_exponent = getExponent(coefficients[k-1]);

            int exponent_difference = first_exponent-second_exponent;

            int temp = (1<<abs(exponent_difference));

            if( exponent_difference < 0 )
            {
            // *e[k-1] = temp;
            ek[k-1] = temp;
            //result[(k-1)*polynomialDegree + k] = temp;
            result[k+1][k] = temp;
            }
            else
            {
            //(*e[k-1]) = 1.0/temp;
            ek[k-1] = 1.0/temp;
            //result[(k-1)*polynomialDegree + k] = 1.0/temp;
            result[k+1][k] = 1.0/temp;
            }
            }

            // Perform the appropriate divisions.
            for(k = 1; k < polynomialDegree; k++)
            {
            for(int div = k-1; div < polynomialDegree-1; div++)
            {
            result[k][polynomialDegree] /= ek[div];
            }
            }
            */
        }

        void generateCoordinateSystemFromVector(const ElVis::WorldVector& basis, ElVis::WorldVector& u,
            ElVis::WorldVector& v, ElVis::WorldVector& w)
        {
            w = basis;
            w.Normalize();

            // From Pete Shirley's book.
            ElVis::WorldVector z = w;
            double fabx = fabs(z.x());
            double faby = fabs(z.y());
            double fabz = fabs(z.z());
            if( fabx < fabz && faby < fabz )
            {
                z.SetX(1.0);
            }
            else if( faby < fabx && fabz < fabx )
            {
                z.SetY(1.0);
            }
            else
            {
                z.SetZ(1.0);
            }

            u = z.Cross(w);
            u.Normalize();

            v = w.Cross(u);
        }

        void swapMatrixOrder(double** h, int n)
        {
            for(int i = 1; i < n; i++)
            {
                for(int j = 0; j < i; j++)
                {
                    double temp = h[i][j];
                    h[i][j] = h[j][i];
                    h[j][i] = temp;
                }
            }
        }

        void makeMatrix0Indexed(double** h, int n)
        {
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    h[i][j] = h[i+1][j+1];
                }
            }
        }

        void collapseMatrix(double* result, double** h, int n)
        {
            int index = 0;
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < n; j++)
                {
                    result[index] = h[i][j];
                    index++;
                }
            }
        }

        //bool planeIntersection(const rt::Ray& theRay, const ElVis::WorldVector& normal, double D, double &t)
        //{
        //    // Eric Haines
        //    // Essential rt::Ray Tracing Algorithms.
        //    //double vd = SCIRun::Dot(theRay.direction(), normal);
        //    //cout << theRay.direction() << endl;
        //    //cout << normal << endl;
        //    double vd = theRay.getDirection().Dot(normal);
        //    //cout << vd << endl;
        //    if( vd == 0.0 )
        //        return false;

        //    //double v0 = -(SCIRun::Dot(theRay.origin(), normal) + D);
        //    ElVis::WorldVector temp = ElVis::WorldVector(theRay.getOrigin().x(),
        //        theRay.getOrigin().y(), theRay.getOrigin().z());
        //    double v0 = -(temp.Dot(normal) + D);
        //    t = v0/vd;

        //    return (t > 0);
        //}

        int numberOfTimesEdgeCrossesPositiveXAxis(const ElVis::WorldPoint& g1, const ElVis::WorldPoint& g2)
        {
            if( (g1.y() < 0 && g2.y() >= 0) ||
                (g1.y() >= 0 && g2.y() < 0) )
            {
                // Changed from algrithm to include points at x=0.  This means
                // two adjacent polygons could both claim intersection, but then
                // we won't miss edges (hopefully).
                if( g1.x() >= 0 && g2.x() >= 0 )
                    return 1;

                if( g1.x() >= 0 || g2.x() >= 0 )
                {
                    if( g1.x() - g1.y()*(g2.x()-g1.x())/(g2.y() - g1.y()) > 0 )
                        return 1;
                }
            }

            return 0;
        }


        double evalPolynomial(double* coeffs, double x, int n)
        {
            double result = coeffs[n];
            for(int i = n; i >= 1; i--)
            {
                result *= x;
                result += coeffs[i-1];
            }
            return result;
        }

        double evalPolynomialDerivative(double* coeffs, double x, int n)
        {
            double result = coeffs[n]*n;
            for(int i = n; i >= 2; i--)
            {
                result *= x;
                result += coeffs[i-1]*(i-1);
            }
            return result;
        }

        double factorial(unsigned int n)
        {
            double result = 1.0;
            for(unsigned int i = 2; i <= n; ++i)
            {
                result *= static_cast<double>(i);
            }

            return result;
        }

        double binomial(unsigned int n, unsigned int k)
        {
            return factorial(n)/(factorial(n-k)*factorial(k));
        }
    }
}
